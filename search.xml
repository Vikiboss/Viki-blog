<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记一次使用 Python 爬取B站up主信息经历</title>
      <link href="2020/11/29/python-crawler/"/>
      <url>2020/11/29/python-crawler/</url>
      
        <content type="html"><![CDATA[        <h2 id="需求"   >          <a href="#需求" class="heading-link"><i class="fas fa-link"></i></a>需求</h2>      <p>尽可能获取 B 站美食博主列表 按照粉丝数排序 最终目的是能找出粉丝数前列 up 主的 id 名</p>        <h2 id="思路"   >          <a href="#思路" class="heading-link"><i class="fas fa-link"></i></a>思路</h2>      <ul><li>将几个包含很多美食区视频的网页的 url 存起来</li><li>通过请求 url 拿到尽可能多的投稿视频的链接</li><li>通过视频链接拿到 up 主的主页链接 并分析出 up 主的 uid</li><li>通过 uid 请求信息接口 拿到 up 主的 id 以及粉丝数</li></ul>        <h2 id="用到的库及其作用"   >          <a href="#用到的库及其作用" class="heading-link"><i class="fas fa-link"></i></a>用到的库及其作用</h2>      <p><code>csv</code> : 读写 csv 文件<br><code>josn</code> : 读写 josn 文件<br><code>time</code> : 进行延时操作<br><code>random</code> : 随机数功能实现<br><code>codecs</code> : 打开文件 (解决中文写入文件后乱码问题)<br><code>requests</code> : 请求库<br><code>selenium</code> : 模拟浏览器<br><code>UserAgent</code> : 随机 UA 库<br><code>threading</code> : 多线程库<br><code>BeautifulSoup</code> : 解析 HTML 与 XML 的库</p>        <h2 id="遇到的问题以及解决方案"   >          <a href="#遇到的问题以及解决方案" class="heading-link"><i class="fas fa-link"></i></a>遇到的问题以及解决方案</h2>              <h3 id="拿不到-html-结构"   >          <a href="#拿不到-html-结构" class="heading-link"><i class="fas fa-link"></i></a>拿不到 html 结构</h3>      <p>可能是因为<strong>没有设置 UA</strong> 服务器无法确认请求是否由用户发出</p><p>提前设置好请求头 UA(浏览器标识), <strong>伪装成浏览器, 模拟用户正常请求</strong>, 防止 ip 被 ban <del>如果已经被 ban 那就算啦</del></p><p>这里可以自己设置 UA 为指定浏览器标识 也可以用库来随机生成</p><p>这里<strong>建议使用 <code>fake_useragent</code> 库来随机生成 UA 标识</strong></p><p>安装 <code>fake_useragent</code>:</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip insatll fake_useragent</span><br></pre></td></tr></table></div></figure><p>使用:</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line">UA = UserAgent().random</span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: UA&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="拿到的-html-结构不完整"   >          <a href="#拿到的-html-结构不完整" class="heading-link"><i class="fas fa-link"></i></a>拿到的 html 结构不完整</h3>      <p>可能是因为<strong>网页动态加载</strong>的(拿到网页并用浏览器解析之后还需要 js 来动态更新网页内容), 导致拿到的网页的 html 结构残缺, 拿不到想要的数据</p><p>可以<strong>使用 <code>Selenium</code> 库来模拟浏览器爬虫</strong> 这样他会<strong>等到网页加载完全</strong>再拿出网页的 html</p><p>安装 <code>Selenium</code>:</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></div></figure><p>下载你使用的对应版本的浏览器驱动:</p><ul><li>Firefox: <span class="exturl"><a class="exturl__link"   href="https://github.com/mozilla/geckodriver/releases"  target="_blank" rel="noopener">geckodriver</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>Chrome: <span class="exturl"><a class="exturl__link"   href="https://npm.taobao.org/mirrors/chromedriver"  target="_blank" rel="noopener">chromedriver</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>IE: <span class="exturl"><a class="exturl__link"   href="http://selenium-release.storage.googleapis.com/index.html"  target="_blank" rel="noopener">IEDriverServer</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>Edge: <span class="exturl"><a class="exturl__link"   href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver"  target="_blank" rel="noopener">MicrosoftWebDriver</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>Opera: <span class="exturl"><a class="exturl__link"   href="https://github.com/operasoftware/operachromiumdriver/releases"  target="_blank" rel="noopener">operadriver</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>PhantomJS: <span class="exturl"><a class="exturl__link"   href="http://phantomjs.org/"  target="_blank" rel="noopener">phantomjs</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul><p>使用:</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># driver = webdriver.Firefox()   # Firefox浏览器</span></span><br><span class="line"><span class="comment"># driver = webdriver.Chrome()    # Chrome浏览器</span></span><br><span class="line"><span class="comment"># driver = webdriver.Ie()        # Internet Explorer浏览器</span></span><br><span class="line"><span class="comment"># driver = webdriver.Edge()      # Edge浏览器</span></span><br><span class="line"><span class="comment"># driver = webdriver.Opera()     # Opera浏览器</span></span><br><span class="line"><span class="comment"># driver = webdriver.PhantomJS() # PhantomJS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里使用对应的浏览器标识创建实例</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(web)</span><br><span class="line"><span class="comment"># html 即为拿到的网页html结构字符串</span></span><br><span class="line">html = browser.page_source</span><br></pre></td></tr></table></div></figure>        <h3 id="无法永久保存且不会乱码的数据"   >          <a href="#无法永久保存且不会乱码的数据" class="heading-link"><i class="fas fa-link"></i></a>无法永久保存且不会乱码的数据</h3>      <p>我太菜了 不会使数据库 所以只能存本地了 为了数据后续处理的方便 这里<strong>使用了 <code>csv</code> 文件格式存数据</strong></p><p>同时使用了 <code>codecs</code> 打开文件来防止乱码</p><p><code>csv</code> 格式文件很简单 Excel 也能打开并处理</p><p>Python 里有 <code>csv</code> 库来读写 <code>csv</code> 格式文件</p><p>安装 <code>csv</code> 及 <code>codecs</code> 库:</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install csv codecs</span><br></pre></td></tr></table></div></figure><p>使用:</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">"data.csv"</span></span><br><span class="line"><span class="comment"># ab 为追加 wb 为覆盖  更详细的内容自行搜索</span></span><br><span class="line">csv_file = codecs.open(filename, <span class="string">'ab'</span>, <span class="string">"gbk"</span>)</span><br><span class="line"><span class="comment"># 打开实例</span></span><br><span class="line">csv_writer = csv.writer(csv_file)</span><br><span class="line"><span class="comment"># 写入表头</span></span><br><span class="line">csv_writer.writerow((<span class="string">"第一项"</span>,<span class="string">"第二项"</span>))</span><br><span class="line">info = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">infos = [(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line"><span class="comment"># 写入一行数据</span></span><br><span class="line">csv_writer.writerow(info)</span><br><span class="line"><span class="comment"># 写入多行数据</span></span><br><span class="line">csv_writer.writerow(infos)</span><br></pre></td></tr></table></div></figure>        <h3 id="返回的数据是-json-格式"   >          <a href="#返回的数据是-json-格式" class="heading-link"><i class="fas fa-link"></i></a>返回的数据是 json 格式</h3>      <p>使用 <code>json</code> 库处理</p><p>安装 <code>json</code> 库:</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install json</span><br></pre></td></tr></table></div></figure><p>使用:</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">jsonData  = <span class="string">'&#123;"name": "Viki"&#125;'</span></span><br><span class="line"><span class="comment"># json字符串转为Python的字典(或者其他数据)</span></span><br><span class="line">data = json.load(jsonData)</span><br><span class="line">print(data[<span class="string">'name'</span>]) <span class="comment"># Viki</span></span><br><span class="line"><span class="comment"># Python的字典(或者其他数据)转为json字符串</span></span><br><span class="line">jsonStr = json.dumps(data)</span><br><span class="line">print(jsonStr) <span class="string">'&#123;"name": "Viki"&#125;'</span></span><br></pre></td></tr></table></div></figure>        <h3 id="爬取速度太慢"   >          <a href="#爬取速度太慢" class="heading-link"><i class="fas fa-link"></i></a>爬取速度太慢</h3>      <p>使用 <code>threading</code> 库实现<strong>多线程</strong></p><p>安装 <code>threading</code>:</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install threading</span><br></pre></td></tr></table></div></figure><p>使用:</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n*n</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> lst:</span><br><span class="line">    double_thread = threading.Thread(target=double, args=(n))</span><br><span class="line">    double_thread.start()</span><br></pre></td></tr></table></div></figure>        <h2 id="代码实现"   >          <a href="#代码实现" class="heading-link"><i class="fas fa-link"></i></a>代码实现</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line">biliFoodUrls = [</span><br><span class="line">    <span class="string">'https://www.bilibili.com/v/food'</span>,</span><br><span class="line">    <span class="string">'https://www.bilibili.com/v/food/make'</span>,</span><br><span class="line">    <span class="string">'https://www.bilibili.com/v/food/rural'</span>,</span><br><span class="line">    <span class="string">'https://www.bilibili.com/v/food/record'</span>,</span><br><span class="line">    <span class="string">'https://www.bilibili.com/v/food/detective'</span>,</span><br><span class="line">    <span class="string">'https://www.bilibili.com/v/food/measurement'</span>,</span><br><span class="line">    <span class="string">'https://www.bilibili.com/v/popular/rank/food'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grabVideoUrl</span><span class="params">(url, videoUrls, upUrls, upUids, upInfos, browser)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> url[<span class="number">0</span>] == <span class="string">'/'</span>:</span><br><span class="line">        url = <span class="string">'https:'</span>+url</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'bilibili.com/video'</span> <span class="keyword">in</span> url:</span><br><span class="line">        videoUrls.append(url)</span><br><span class="line">        print(<span class="string">f'捕获到视频url:\t<span class="subst">&#123;url&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'space.bilibili.com'</span> <span class="keyword">in</span> url:</span><br><span class="line">        upUrls.append(url)</span><br><span class="line">        print(<span class="string">f'捕获到up主url:\t<span class="subst">&#123;url&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getVideosUrl</span><span class="params">(videoUrls, upUrls, upUids, upInfos, browser)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> web <span class="keyword">in</span> biliFoodUrls:</span><br><span class="line">        print(<span class="string">f"开始处理页面:\t<span class="subst">&#123;web&#125;</span>"</span>)</span><br><span class="line">        browser.get(web)</span><br><span class="line">        html = browser.page_source</span><br><span class="line">        webBf = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">        al = webBf.find_all(<span class="string">"a"</span>)</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> al:</span><br><span class="line">            url = a.get(<span class="string">'href'</span>)</span><br><span class="line">            args = (url, videoUrls, upUrls, upUids, upInfos, browser)</span><br><span class="line">            video_thread = threading.Thread(target=grabVideoUrl, args=args)</span><br><span class="line">            video_thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grabUpsUrl</span><span class="params">(videoUrl, videoUrls, upUrls, upUids, upInfos, browser)</span>:</span></span><br><span class="line">    print(<span class="string">f"开始处理视频url:\t<span class="subst">&#123;videoUrl&#125;</span>"</span>)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: UserAgent().random,</span><br><span class="line">        <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, sdch, br'</span>,</span><br><span class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    html = requests.request(<span class="string">'GET'</span>, videoUrl, headers=headers).content</span><br><span class="line">    webBf = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">    upDiv = webBf.find(id=<span class="string">'v_upinfo'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> upDiv:</span><br><span class="line">        print(<span class="string">f"获取视频up主信息遭到拦截\t<span class="subst">&#123;videoUrl&#125;</span>"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    upUrl = upDiv.find_all(<span class="string">'a'</span>)[<span class="number">0</span>].get(<span class="string">'href'</span>)</span><br><span class="line">    <span class="keyword">if</span> upUrl[<span class="number">0</span>] == <span class="string">'/'</span>:</span><br><span class="line">        upUrl = <span class="string">'https:'</span> + upUrl</span><br><span class="line">    upUrls.append(upUrl)</span><br><span class="line">    print(<span class="string">f'捕获到up主url:\t<span class="subst">&#123;upUrl&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUpsUrl</span><span class="params">(videoUrls, upUrls, upUids, upInfos, browser)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> videoUrl <span class="keyword">in</span> videoUrls:</span><br><span class="line">        args = (videoUrl, videoUrls, upUrls, upUids, upInfos, browser)</span><br><span class="line">        upUrl_thread = threading.Thread(target=grabUpsUrl, args=args)</span><br><span class="line">        upUrl_thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUpsId</span><span class="params">(videoUrls, upUrls, upUids, upInfos, browser)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> upUrl <span class="keyword">in</span> upUrls:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> upUrl:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        upUid = upUrl.split(<span class="string">"#"</span>)[<span class="number">0</span>].split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        upUids.append(upUid)</span><br><span class="line">        print(<span class="string">f'捕获到up主id:\t<span class="subst">&#123;upUid&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUpsInfo</span><span class="params">(videoUrls, upUrls, upUids, upInfos, browser)</span>:</span></span><br><span class="line">    api = <span class="string">'https://api.bilibili.com/x/web-interface/card?jsonp=jsonp&amp;mid='</span></span><br><span class="line">    ids = set(upUids)</span><br><span class="line">    upUids = list(ids)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, upUid <span class="keyword">in</span> enumerate(upUids):</span><br><span class="line"></span><br><span class="line">        print(<span class="string">f"开始处理mid:<span class="subst">&#123;upUid&#125;</span>\t进度:<span class="subst">&#123;index+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;len(upUids)&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: UserAgent().random,</span><br><span class="line">            <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">            <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, sdch, br'</span>,</span><br><span class="line">            <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8'</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res = requests.request(<span class="string">'GET'</span>, <span class="string">f"<span class="subst">&#123;api&#125;</span><span class="subst">&#123;upUid&#125;</span>"</span>, headers=headers)</span><br><span class="line">        data = res.json()[<span class="string">'data'</span>]</span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((<span class="keyword">not</span> data) <span class="keyword">and</span> n &lt; <span class="number">100</span>):</span><br><span class="line">            print(<span class="string">f"请求遭到服务器拦截  重试第<span class="subst">&#123;n+<span class="number">1</span>&#125;</span>次中...\t总进度:<span class="subst">&#123;index+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;len(upUids)&#125;</span>"</span>)</span><br><span class="line">            headers = &#123;</span><br><span class="line">                <span class="string">'User-Agent'</span>: UserAgent().random,</span><br><span class="line">                <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">                <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">                <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, sdch, br'</span>,</span><br><span class="line">                <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            res = requests.request(<span class="string">'GET'</span>, <span class="string">f"<span class="subst">&#123;api&#125;</span><span class="subst">&#123;upUid&#125;</span>"</span>, headers=headers)</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            data = res.json()[<span class="string">'data'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">f"读取up主信息(mid=<span class="subst">&#123;upUid&#125;</span>)成功"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if not data:</span></span><br><span class="line">        <span class="comment">#     print(f"读取up主信息(mid=&#123;upUid&#125;)的请求遭到服务器拦截")</span></span><br><span class="line">        <span class="comment">#     continue</span></span><br><span class="line"></span><br><span class="line">        upName = data[<span class="string">'card'</span>][<span class="string">'name'</span>]</span><br><span class="line">        follower = data[<span class="string">'follower'</span>]</span><br><span class="line">        mid = data[<span class="string">'card'</span>][<span class="string">'mid'</span>]</span><br><span class="line">        upInfos.append(&#123;<span class="string">'id'</span>: upName, <span class="string">'follower'</span>: follower, <span class="string">'mid'</span>: mid&#125;)</span><br><span class="line"></span><br><span class="line">    upInfos = sorted(upInfos, key=<span class="keyword">lambda</span> upInfo: upInfo[<span class="string">'follower'</span>])</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"写入Excel文件中..."</span>)</span><br><span class="line">    filename = <span class="string">"bili.csv"</span></span><br><span class="line">    bili_csv = codecs.open(filename, <span class="string">'ab'</span>, <span class="string">"gbk"</span>)</span><br><span class="line">    bili_csv_writer = csv.writer(bili_csv)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> upInfo <span class="keyword">in</span> upInfos:</span><br><span class="line">        msg = <span class="string">f"写入中\tUp主id:<span class="subst">&#123;upInfo[<span class="string">'id'</span>]&#125;</span>\t粉丝数:<span class="subst">&#123;upInfo[<span class="string">'follower'</span>]&#125;</span>\tmid=<span class="subst">&#123;upInfo[<span class="string">'mid'</span>]&#125;</span>"</span></span><br><span class="line">        print(msg)</span><br><span class="line"></span><br><span class="line">        info = (upInfo[<span class="string">'id'</span>], upInfo[<span class="string">'follower'</span>], upInfo[<span class="string">'mid'</span>])</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bili_csv_writer.writerow(info)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    bili_csv.close()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f"写入到<span class="subst">&#123;filename&#125;</span>完成  本次共爬取到<span class="subst">&#123;len(upInfos)&#125;</span>个up主信息"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(browser)</span>:</span></span><br><span class="line">    videoUrls = []</span><br><span class="line">    upUrls = []</span><br><span class="line">    upUids = []</span><br><span class="line">    upInfos = []</span><br><span class="line">    getVideosUrl(videoUrls, upUrls, upUids, upInfos, browser)</span><br><span class="line">    getUpsUrl(videoUrls, upUrls, upUids, upInfos, browser)</span><br><span class="line">    time.sleep(<span class="number">20</span>)</span><br><span class="line">    getUpsId(videoUrls, upUrls, upUids, upInfos, browser)</span><br><span class="line">    getUpsInfo(videoUrls, upUrls, upUids, upInfos, browser)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    browser = webdriver.Chrome()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        print(<span class="string">f"开始第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>次爬取..."</span>)</span><br><span class="line">        main(browser)</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></div></figure>        <h3 id="参考"   >          <a href="#参考" class="heading-link"><i class="fas fa-link"></i></a>参考</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/111859925"  target="_blank" rel="noopener">Selenium Python 教程 - 知乎</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅析JavaScript中this的指向问题</title>
      <link href="2020/11/21/js-this/"/>
      <url>2020/11/21/js-this/</url>
      
        <content type="html"><![CDATA[        <h2 id="说在前面"   >          <a href="#说在前面" class="heading-link"><i class="fas fa-link"></i></a>说在前面</h2>      <p>平时自己写代码或者在参加前端职位的面试的过程中, js 里 this 的指向一直是个热点问题</p><p>这篇文章旨在帮助读者深入了解 js 里各种情况 this 的指向</p><p>在笔者自己彻底理解的同时, 也可以作为后来人的参考</p><blockquote><p>本文主要探讨浏览器环境下的 <code>this</code> 指向问题 node 环境会有所不同 如: 浏览器全局对象是 <code>window</code> 而 node 环境全局对象是 <code>gobal</code></p></blockquote>        <h2 id="this-指向详析"   >          <a href="#this-指向详析" class="heading-link"><i class="fas fa-link"></i></a>this 指向详析</h2>              <h3 id="1-全局环境中"   >          <a href="#1-全局环境中" class="heading-link"><i class="fas fa-link"></i></a>1. 全局环境中</h3>      <p><code>this</code> 指向 <code>window</code></p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标准模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// window</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 严格模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="meta">  "use strict"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// window</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js  标准模式的全局环境下</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// window</span></span><br></pre></td></tr></table></div></figure><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js  严格模式的全局环境下</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// window</span></span><br></pre></td></tr></table></div></figure>        <h3 id="2-function-定义的函数中"   >          <a href="#2-function-定义的函数中" class="heading-link"><i class="fas fa-link"></i></a>2. function 定义的函数中</h3>      <p>根据<strong>调用对象</strong>与 <strong>js 执行模式</strong>决定</p><ul><li><p>普通函数调用:</p><ul><li>标准模式下: <code>this</code> 指向 <code>window</code></li><li>严格模式下: <code>this</code> 指向 <code>undefined</code></li></ul></li><li><p>函数由对象调用: <code>this</code> 指向 <code>该对象</code></p></li><li><p>通过 <code>new</code> 操作符调用: <code>this</code> 指向 <code>新创建的对象</code></p></li><li><p>通过 <code>call/apply</code> 调用: <code>this</code> 指向 <code>参数指定的对象</code></p></li><li><p>通过 <code>bind</code> 可以修改 <code>this</code> 指向: 返回一个新函数, 这个函数的 <code>this</code> 被绑定为指定对象</p></li></ul><blockquote><p>普通函数调用可以看作是 window 对象调用函数, 此时 this 就指向调用它的对象 即 window 对象</p></blockquote><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标准模式下 普通函数调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于 window.foo()</span></span><br><span class="line">foo(); <span class="comment">// window</span></span><br></pre></td></tr></table></div></figure><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 严格模式下 函数普通调用</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></div></figure><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过对象调用函数</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.foo(); <span class="comment">// obj</span></span><br></pre></td></tr></table></div></figure><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 new 操作符调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bar = bar;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo(<span class="number">2</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// foo &#123;bar: 2&#125;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 call/apply 调用</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar(); <span class="comment">//undefined</span></span><br><span class="line">bar.call(obj); <span class="comment">// 1</span></span><br><span class="line">bar.apply(obj); <span class="comment">// 1</span></span><br><span class="line">bar.call(<span class="literal">null</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></div></figure><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar(); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> bark = bar.bind(obj); <span class="comment">// 无输出</span></span><br><span class="line">bark(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">obj.foo = <span class="number">2</span>;</span><br><span class="line">bark(); <span class="comment">// 2</span></span><br></pre></td></tr></table></div></figure><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步函数中this指向 window</span></span><br><span class="line"><span class="keyword">var</span> bar = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  bar: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bark</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.bar);</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.bar);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bark.call(obj); <span class="comment">// 0 (等待一秒) 100</span></span><br></pre></td></tr></table></div></figure>        <h3 id="3-ES6-箭头函数中"   >          <a href="#3-ES6-箭头函数中" class="heading-link"><i class="fas fa-link"></i></a>3. ES6 箭头函数中</h3>      <ul><li><p>箭头函数没有自己的 <code>this</code></p></li><li><p>箭头函数的 <code>this</code> 继承自当前作用域链上最近的 <code>this</code></p></li><li><p>当无法找到时, 指向 <code>window</code></p></li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  bar.call(obj);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// window 100</span></span><br><span class="line">foo.call(obj); <span class="comment">// &#123;count: 0&#125; 0</span></span><br></pre></td></tr></table></div></figure><blockquote><p>当上述代码中的 <code>var</code> 换为了 <code>let</code> 之后结果又是什么? 不妨自己试试.</p></blockquote>        <h3 id="其他情况"   >          <a href="#其他情况" class="heading-link"><i class="fas fa-link"></i></a>其他情况</h3>              <h4 id="html-中调用函数"   >          <a href="#html-中调用函数" class="heading-link"><i class="fas fa-link"></i></a>html 中调用函数</h4>      <p><code>this</code> 依旧指向 <code>window</code></p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接调用函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"msg()"</span>&gt;</span>Viki<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">msg</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="keyword">this</span>); <span class="comment">// this指向window 获取不到元素</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 传入元素参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"foo(event.target)"</span>&gt;</span>Viki<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(element)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(element); <span class="comment">// this还是指向window 不过现在可以操作元素</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="通过-js-绑定事件来调用函数"   >          <a href="#通过-js-绑定事件来调用函数" class="heading-link"><i class="fas fa-link"></i></a>通过 js 绑定事件来调用函数</h4>      <p><code>this</code> 默认指向 <code>元素本身</code></p><p>注意: 在 ie 中使用 <code>attachEvent</code> 时 <code>this</code> 指向 <code>window</code></p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给事件定义函数</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line">box.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.id); <span class="comment">// "box"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加事件监听</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line">box.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.id); <span class="comment">// "box"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在ie中使用attachEvent() this指向window</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line">box.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>); <span class="comment">// winodw</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure>        <h4 id="Ajax-中-原生-XHR-对象的-this-指向问题"   >          <a href="#Ajax-中-原生-XHR-对象的-this-指向问题" class="heading-link"><i class="fas fa-link"></i></a>Ajax 中 原生 XHR 对象的 this 指向问题</h4>      <p>由于 <code>onreadystatechange</code> 事件的作用域问题, 使用 <code>this</code> 对象，函数可能会在一些浏览器执行失败，或者发生错误. 所以一般使用 xhr 实例对象更加靠谱.</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"https://example.org"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里一般使用xhr实例对象而不用this</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      alert(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">"Request Failed: "</span> + xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></div></figure>        <h2 id="参考"   >          <a href="#参考" class="heading-link"><i class="fas fa-link"></i></a>参考</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/star91/p/5657269.html"  target="_blank" rel="noopener">你不知道的 this - Feminer</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><a href="#">js 语法基础 - lenconda</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令速览</title>
      <link href="2020/10/11/git-commands-record/"/>
      <url>2020/10/11/git-commands-record/</url>
      
        <content type="html"><![CDATA[        <h2 id="用的最为频繁的-git-命令"   >          <a href="#用的最为频繁的-git-命令" class="heading-link"><i class="fas fa-link"></i></a>用的最为频繁的 git 命令</h2>      <p>首先上张图</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://i.loli.net/2020/10/15/Swsq8OFLTMDzGjE.jpg"  alt="git常用命令">      </p>        <h3 id="配置默认信息"   >          <a href="#配置默认信息" class="heading-link"><i class="fas fa-link"></i></a>配置默认信息</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"[username]"</span></span><br><span class="line">git config --global user.email <span class="string">"[email_address]"</span></span><br></pre></td></tr></table></div></figure>        <h3 id="初始化版本库"   >          <a href="#初始化版本库" class="heading-link"><i class="fas fa-link"></i></a>初始化版本库</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将当前目录初始化为 git 版本库</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 重命名当前分支为 main</span></span><br><span class="line">git branch -M main</span><br></pre></td></tr></table></div></figure><blockquote><p>推荐使用 main 作为主分支名 参见: <span class="exturl"><a class="exturl__link"   href="https://github.com/github/renaming#new-repositories-use-main-as-default-branch-name"  target="_blank" rel="noopener">链接</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h3 id="设置远程分支"   >          <a href="#设置远程分支" class="heading-link"><i class="fas fa-link"></i></a>设置远程分支</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin [repo_url]</span><br></pre></td></tr></table></div></figure>        <h3 id="暂存更改"   >          <a href="#暂存更改" class="heading-link"><i class="fas fa-link"></i></a>暂存更改</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></div></figure>        <h3 id="提交更改"   >          <a href="#提交更改" class="heading-link"><i class="fas fa-link"></i></a>提交更改</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"[commit_message]"</span></span><br></pre></td></tr></table></div></figure>        <h3 id="发布-main-分支"   >          <a href="#发布-main-分支" class="heading-link"><i class="fas fa-link"></i></a>发布 main 分支</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></div></figure>        <h2 id="较为常用的命令"   >          <a href="#较为常用的命令" class="heading-link"><i class="fas fa-link"></i></a>较为常用的命令</h2>              <h3 id="一、修改与提交操作"   >          <a href="#一、修改与提交操作" class="heading-link"><i class="fas fa-link"></i></a>一、修改与提交操作</h3>              <h4 id="查看当前版本库状态"   >          <a href="#查看当前版本库状态" class="heading-link"><i class="fas fa-link"></i></a>查看当前版本库状态</h4>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></div></figure>        <h4 id="暂存更改-1"   >          <a href="#暂存更改-1" class="heading-link"><i class="fas fa-link"></i></a>暂存更改</h4>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></div></figure>        <h4 id="提交更改-1"   >          <a href="#提交更改-1" class="heading-link"><i class="fas fa-link"></i></a>提交更改</h4>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"[commit_message]"</span></span><br></pre></td></tr></table></div></figure>        <h4 id="修改最后一次提交"   >          <a href="#修改最后一次提交" class="heading-link"><i class="fas fa-link"></i></a>修改最后一次提交</h4>      <p>运行以下命令后按<code>i</code>进入编辑模式</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></div></figure>        <h3 id="二、分支操作"   >          <a href="#二、分支操作" class="heading-link"><i class="fas fa-link"></i></a>二、分支操作</h3>              <h4 id="新建分支"   >          <a href="#新建分支" class="heading-link"><i class="fas fa-link"></i></a>新建分支</h4>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [new_branch]</span><br></pre></td></tr></table></div></figure>        <h4 id="切换分支"   >          <a href="#切换分支" class="heading-link"><i class="fas fa-link"></i></a>切换分支</h4>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout [banch_name]</span><br><span class="line">git checkout HEAD^</span><br><span class="line">git checkout HEAD~3</span><br></pre></td></tr></table></div></figure>        <h4 id="删除本地分支"   >          <a href="#删除本地分支" class="heading-link"><i class="fas fa-link"></i></a>删除本地分支</h4>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d [branch_name]</span><br></pre></td></tr></table></div></figure>        <h4 id="新建并切换到指定分支"   >          <a href="#新建并切换到指定分支" class="heading-link"><i class="fas fa-link"></i></a>新建并切换到指定分支</h4>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b [branch_name]</span><br></pre></td></tr></table></div></figure>        <h4 id="合并分支"   >          <a href="#合并分支" class="heading-link"><i class="fas fa-link"></i></a>合并分支</h4>      <p>合并指定分支到当前分支</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [branch_name]</span><br></pre></td></tr></table></div></figure>        <h4 id="迁移分支"   >          <a href="#迁移分支" class="heading-link"><i class="fas fa-link"></i></a>迁移分支</h4>      <p>把当前分支迁移到目标分支的后面</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase [branch_name]</span><br></pre></td></tr></table></div></figure><blockquote><p>迁移完了后注意 <code>master</code> 等分支的当前引用位置，若目标分支是 <code>maste</code>、<code>main</code> 等主分支， 建议将主分支也 <code>rebase</code> 到最新的更改</p></blockquote>        <h3 id="三、撤销操作"   >          <a href="#三、撤销操作" class="heading-link"><i class="fas fa-link"></i></a>三、撤销操作</h3>              <h4 id="软撤销"   >          <a href="#软撤销" class="heading-link"><i class="fas fa-link"></i></a>软撤销</h4>      <p>仅仅撤销上一个 <code>commit</code> 不修改你改动了的文件</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></div></figure><p>若只是想修改 <code>commit</code> 信息，可以先运行下列命令，然后输入 <code>i</code> 进入编辑模式，并修改第一行 <code>commit</code> 信息</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></div></figure>        <h4 id="硬撤销"   >          <a href="#硬撤销" class="heading-link"><i class="fas fa-link"></i></a>硬撤销</h4>      <p>撤销 commit 的同时， 删除你对文件做出的所有改动， 还原到上一个 commit 的状态</p><blockquote><p>说人话就是: 不懂的话千万别乱用 否则一下午写的代码全白给</p></blockquote><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^ <span class="comment"># 撤销上一个提交</span></span><br><span class="line">git reset --hard HEAD~3 <span class="comment"># 撤销前三个提交</span></span><br></pre></td></tr></table></div></figure><p>如果实在是不小心误删， 可以先查看撤销记录， 找到要还原的记录的 <code>commitID</code> ， 再通过 <code>commitID</code> 还原:</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line">git reset --hard [commitID]</span><br></pre></td></tr></table></div></figure><p>然后再根据需求撤销当前 <code>commmit</code></p>        <h3 id="四、查看提交历史"   >          <a href="#四、查看提交历史" class="heading-link"><i class="fas fa-link"></i></a>四、查看提交历史</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> <span class="comment"># 查看git日志(按q退出)</span></span><br><span class="line">git show (commitID) <span class="comment"># 查看上一次(或者指定id的)提交记录</span></span><br><span class="line">git <span class="built_in">log</span> -p [file_name] <span class="comment"># 查看指定文件</span></span><br><span class="line">git blame [file_name] <span class="comment"># 以列表形式查看指定文件提交历史</span></span><br></pre></td></tr></table></div></figure>        <h2 id="附：可用来查阅的-git-命令集"   >          <a href="#附：可用来查阅的-git-命令集" class="heading-link"><i class="fas fa-link"></i></a>附：可用来查阅的 git 命令集</h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">// 初始化一个 git 版本库</span><br><span class="line">git init</span><br><span class="line">// 查看版本库的状态</span><br><span class="line">git status</span><br><span class="line">// 全局默认信息配置</span><br><span class="line">git config --global user.email <span class="string">"[email_addres]"</span></span><br><span class="line">// 全局默认信息配置</span><br><span class="line">git config --global user.name <span class="string">"[username]"</span></span><br><span class="line">// 将所有修改添加到暂存区</span><br><span class="line">git add .</span><br><span class="line">// Ant 风格添加修改</span><br><span class="line">git add *</span><br><span class="line">// 将以 Hello 结尾的文件的所有修改添加到暂存区</span><br><span class="line">git add *Hello</span><br><span class="line">// 将所有以 Hello 开头的文件的修改添加到暂存区</span><br><span class="line">git add Hello*</span><br><span class="line">// 将以 Hello 开头且其后仅跟一位字符的文件的修改提交到暂存区</span><br><span class="line">git add Hello?</span><br><span class="line">// 提交更改并附带有意义的信息</span><br><span class="line">git commit -m <span class="string">"comment"</span></span><br><span class="line">// 为本地版本库设置远程分支</span><br><span class="line">git remote add origin [repo_url]</span><br><span class="line">// 克隆远程版本库到本地( git 协议最快)</span><br><span class="line">git <span class="built_in">clone</span> [repo_url]</span><br><span class="line">// 查看当前版本库所有分支</span><br><span class="line">git branch</span><br><span class="line">// 创建 [branch_name] 分支</span><br><span class="line">git branch [branch_name]</span><br><span class="line">// 删除 [branch_name] 分支</span><br><span class="line">git branch -d [branch_name]</span><br><span class="line">// 强制删除 [branch_name] 分支</span><br><span class="line">git branch -D [branch_name]</span><br><span class="line">// 丢弃工作区的修改退回原始状态</span><br><span class="line">git checkout -- [file_name]</span><br><span class="line">// 切换到一个已经存在的分支</span><br><span class="line">git checkout [branch_name]</span><br><span class="line">// 创建 [branch_name] 分支，并切换到 [branch_name] 分支</span><br><span class="line">git checkout -b [branch_name]</span><br><span class="line">// 拉取远程分支的最新更改到本地</span><br><span class="line">git pull</span><br><span class="line">// 将本地 [branch_name] 分支推送到远程的 [branch_name] 分支</span><br><span class="line">git push -u origin [branch_name]</span><br><span class="line">// 切换到 [branch_name] 分支并将本地 [branch_name] 分支推送到远程</span><br><span class="line">git push -u origin [branch_name]</span><br><span class="line">// 将标签 v1.0 推送到远程版本库</span><br><span class="line">git push -u origin v1.0</span><br><span class="line">// 一次性推送全部标签</span><br><span class="line">git push -u origin --tags</span><br><span class="line">// 将 [branch_name] 分支合并到 [branch_name] 分支</span><br><span class="line">git merge [branch_name]</span><br><span class="line">// 禁用 Fast forward 合并 [branch_name] 分支</span><br><span class="line">git merge --no-ff -m <span class="string">"comment"</span> [branch_name]</span><br><span class="line">// 冻结当前的分支修改</span><br><span class="line">git stash</span><br><span class="line">// 列出所有工作现场存储</span><br><span class="line">git stash list</span><br><span class="line">// 查看 commit 信息</span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">// 将 commit 信息简化成一行显示</span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">// 图形化展示分支情况</span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">// 退回到上一个版本， HEAD 表示当前版本</span><br><span class="line">git reset --hard HEAD^</span><br><span class="line">// 退回到上两个版本</span><br><span class="line">git reset --hard HEAD^^</span><br><span class="line">//退回到上 100 个版本</span><br><span class="line">git reset --hard HEAD~100</span><br><span class="line">// 退回到指定版本</span><br><span class="line">git reset --hard [commitID]</span><br><span class="line">// 丢弃已经添加到暂存区的修改</span><br><span class="line">git reset HEAD [file_name]</span><br><span class="line">// 在当前版本 HEAD 上打一个名称为 [tag_name] 的标签</span><br><span class="line">git tag [tag_name]</span><br><span class="line">// 查看所有标签，列表出所有的标签名</span><br><span class="line">git tag</span><br><span class="line">// 为目标 commit 打上 [tag_name] 标签</span><br><span class="line">git tag [tag_name] [commitID]</span><br><span class="line">// 为 commit 打上标签</span><br><span class="line">git tag -a [tag_name] -m <span class="string">"[commit_msg]"</span> [commitID]</span><br><span class="line">// 查看标签的信息，包括文字说明</span><br><span class="line">git tag [tag_name]</span><br><span class="line">// 删除标签 [tag_name]</span><br><span class="line">git tag -d [tag_name]</span><br><span class="line">// 在文件未提交前查看文件被修改的部分</span><br><span class="line">git diff [file_name]</span><br><span class="line">// 从 git 版本库中删除文件(同时从文件系统中删除文件)</span><br><span class="line">git rm file</span><br><span class="line">// 查看之前版本的 commitID</span><br><span class="line">git reflog</span><br><span class="line">// 查看指定标签的提交信息</span><br><span class="line">git show [tag_name]</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>scoop —— 实用的 windows 包管理软件</title>
      <link href="2020/09/20/scoop-basis-commands/"/>
      <url>2020/09/20/scoop-basis-commands/</url>
      
        <content type="html"><![CDATA[        <h2 id="前言"   >          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a>前言</h2>      <p>我们先来了解一下什么是包管理</p>        <h3 id="包管理的概念"   >          <a href="#包管理的概念" class="heading-link"><i class="fas fa-link"></i></a>包管理的概念</h3>      <p>使用过 Linux 的伙伴都知道 Linux 有包管理的概念</p><p>即：可以在命令行下通过一系列的指令来统一管理程序</p><p>常见的使用情景包括: 搜索、安装、更新、卸载等</p><p>macOS 也有类似的包管理器（brew，homebrew 等）</p><p>借助包管理器，我们可以达到统一管理常用软件的目的</p>        <h3 id="windows-平台弊端"   >          <a href="#windows-平台弊端" class="heading-link"><i class="fas fa-link"></i></a>windows 平台弊端</h3>      <p>讲真的，在 mac 上写代码进行开发，体验是远超 windows 的，但是不是人人都买得起 mac ，所以在 windows 平台下进行开发是很多开发人员不得不面对的事实</p><p>可是，windows 目前的软件生态想必大家都很清楚，各种常用开发软件（git chrome python vscode 等等）安装方式层出不穷，安装更新卸载流程繁琐耗时且效率低下，安装路径各异污染目录，且得不到统一的管理</p>        <h2 id="他来了-–-scoop"   >          <a href="#他来了-–-scoop" class="heading-link"><i class="fas fa-link"></i></a>他来了 – scoop</h2>      <p>scoop 的出现，就是为了来解决上述问题的</p><p>简单地说，他将各种软件安装目录有序的堆放在一起，用户数据以及配置文件单独存放，更新时仅仅更新程序本身，极大的提高 windows 平台上管理软件的效率。</p>        <h2 id="如何安装-scoop"   >          <a href="#如何安装-scoop" class="heading-link"><i class="fas fa-link"></i></a>如何安装 scoop</h2>      <p>请确保已经安装了：</p><ul><li>① <code>PowerShell 5</code> (或更高版本，包括 <code>PowerShell Core</code>)</li><li>② <code>.net Framework 4.5</code> (或更高版本)。</li></ul><blockquote><p>现在大部分机子都上了 win10，系统大都符合要求，可以直接进行下面的操作</p></blockquote><p>在终端运行下列命令（建议在当前用户根目录(C:\Users\your_username)下）</p><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行这条命令</span></span><br><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">'https://get.scoop.sh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者这条更短的命令</span></span><br><span class="line">iwr <span class="literal">-useb</span> get.scoop.sh | iex</span><br></pre></td></tr></table></div></figure><p>然后你就可以在终端中输入 <code>scoop</code> 命令来查看是否安装完成</p><p>如果你遇到错误，你可能需要改变执行策略，运行下列命令来启用 <code>powershell</code></p><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-scope</span> CurrentUser</span><br></pre></td></tr></table></div></figure>        <h2 id="scoop-使用"   >          <a href="#scoop-使用" class="heading-link"><i class="fas fa-link"></i></a>scoop 使用</h2>              <h3 id="添加-bucket"   >          <a href="#添加-bucket" class="heading-link"><i class="fas fa-link"></i></a>添加 bucket</h3>      <p>bucket 可以简单理解为软件清单</p><p>只有当前添加的 bucket 里有的软件才可以下载</p><p>通过下面的命令添加常用的 bucket 来扩大你可以安装的软件类别和数目</p><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最常用的bucket</span></span><br><span class="line">scoop bucket add extras</span><br><span class="line"><span class="comment"># 比较全的bucket</span></span><br><span class="line">scoop bucket add extras</span><br><span class="line">scoop bucket add dorado https://github.com/chawyehsu/dorado</span><br><span class="line">scoop bucket add sushi https://github.com/kidonng/sushi</span><br><span class="line">...</span><br></pre></td></tr></table></div></figure>        <h3 id="搜索软件"   >          <a href="#搜索软件" class="heading-link"><i class="fas fa-link"></i></a>搜索软件</h3>      <p>这条命令会在已经加入的 bucket 里搜寻合适的软件并打印出来</p><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop search neteasemusic <span class="comment"># 搜索网易云音乐</span></span><br></pre></td></tr></table></div></figure>        <h3 id="安装软件"   >          <a href="#安装软件" class="heading-link"><i class="fas fa-link"></i></a>安装软件</h3>      <figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install APP_NAME</span><br></pre></td></tr></table></div></figure><p>以下列出了常用的程序的安装命令</p><blockquote><p>必须先装 <code>7zip</code>，安装包的解压依靠它</p></blockquote><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐安装的常用程序（须先加extras的bucket）</span></span><br><span class="line">scoop install <span class="number">7</span>zip git googlechrome vscode nodejs yarn postman everything sharex quicklook telegram</span><br><span class="line"><span class="comment"># 个人使用的软件（须先加extras、dorado和nonportable的bucket）</span></span><br><span class="line">scoop install <span class="number">7</span>zip git googlechrome vscode yarn v2rayn sharex nodejs quicklook dismplusplus postman telegram oh<span class="literal">-my</span><span class="literal">-posh</span> pscolor posh<span class="literal">-git</span> mactype<span class="literal">-np</span> neteasemusic everything mysql adb sudo nginx</span><br></pre></td></tr></table></div></figure>        <h3 id="卸载软件"   >          <a href="#卸载软件" class="heading-link"><i class="fas fa-link"></i></a>卸载软件</h3>      <figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop uninstall APP_NAME</span><br></pre></td></tr></table></div></figure>        <h3 id="更新软件"   >          <a href="#更新软件" class="heading-link"><i class="fas fa-link"></i></a>更新软件</h3>      <figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scoop update APP_NAME</span><br><span class="line"><span class="comment"># 一般都全部更新，用 * 通配符匹配所有</span></span><br><span class="line">scoop update *</span><br></pre></td></tr></table></div></figure>        <h3 id="清理缓存（下载的安装包等）"   >          <a href="#清理缓存（下载的安装包等）" class="heading-link"><i class="fas fa-link"></i></a>清理缓存（下载的安装包等）</h3>      <figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop cache rm *</span><br></pre></td></tr></table></div></figure>        <h3 id="清理已安装软件残留的旧版本"   >          <a href="#清理已安装软件残留的旧版本" class="heading-link"><i class="fas fa-link"></i></a>清理已安装软件残留的旧版本</h3>      <p>更新程序后，旧版本的程序默认是保留的，可以手动清理</p><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop cleanup *</span><br></pre></td></tr></table></div></figure>        <h3 id="切换版本"   >          <a href="#切换版本" class="heading-link"><i class="fas fa-link"></i></a>切换版本</h3>      <p>当安装的软件有多个版本，且都需要同时使用时，可以参考下面设置两个 nodejs 版本共存与切换类似的方法</p><ul><li>先安装所需的版本</li></ul><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scoop install nodejs12</span><br><span class="line">scoop install nodejs <span class="comment"># 此时默认的node -v输出的是最新版本</span></span><br></pre></td></tr></table></div></figure><ul><li>设置需要的版本 / 版本切换</li></ul><p>因为 nodejs12 和最新版共用 node 这个命令，只需要执行 reset 加对应的版本就能够将该命令设置为指定版本</p><p>切换为 nodejs 12 版本</p><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop reset nodejs12</span><br></pre></td></tr></table></div></figure><p>切换为 nodejs 最新版本</p><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop reset nodejs</span><br></pre></td></tr></table></div></figure>        <h3 id="忽略更新"   >          <a href="#忽略更新" class="heading-link"><i class="fas fa-link"></i></a>忽略更新</h3>      <p>通常我们会使用下面的命令来更新所有通过 scoop 下载的软件</p><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop update *</span><br></pre></td></tr></table></div></figure><p>但是有时候我们不想让其中某个软件更新，这个时候就需要用到 hold/unhold 命令</p><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scoop hold postman <span class="comment"># 更新软件时禁止 postman 更新</span></span><br><span class="line">scoop unhold postman <span class="comment"># 取消禁止</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用 npm 命令汇总</title>
      <link href="2020/09/07/npm-commands-record/"/>
      <url>2020/09/07/npm-commands-record/</url>
      
        <content type="html"><![CDATA[<p>小括号中的参数为可选项</p>        <h3 id="更换为国内淘宝源（通过命令直接修改）"   >          <a href="#更换为国内淘宝源（通过命令直接修改）" class="heading-link"><i class="fas fa-link"></i></a>更换为国内淘宝源（通过命令直接修改）</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></div></figure>        <h3 id="更换为国内淘宝源（通过编辑配置文件）"   >          <a href="#更换为国内淘宝源（通过编辑配置文件）" class="heading-link"><i class="fas fa-link"></i></a>更换为国内淘宝源（通过编辑配置文件）</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config edit 加入 registry = https://registry.npm.taobao.org</span><br></pre></td></tr></table></div></figure>        <h3 id="还原成默认国外源"   >          <a href="#还原成默认国外源" class="heading-link"><i class="fas fa-link"></i></a>还原成默认国外源</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br></pre></td></tr></table></div></figure>        <h3 id="查看当前源"   >          <a href="#查看当前源" class="heading-link"><i class="fas fa-link"></i></a>查看当前源</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></div></figure>        <h3 id="安装依赖"   >          <a href="#安装依赖" class="heading-link"><i class="fas fa-link"></i></a>安装依赖</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install (-g) package_name (--save / --save-dev) (--registry https://registry.npm.taobao.org)</span><br></pre></td></tr></table></div></figure>        <h3 id="移除依赖"   >          <a href="#移除依赖" class="heading-link"><i class="fas fa-link"></i></a>移除依赖</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall (-g) package_name (--save / --save-dev)</span><br></pre></td></tr></table></div></figure>        <h3 id="更新依赖"   >          <a href="#更新依赖" class="heading-link"><i class="fas fa-link"></i></a>更新依赖</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update (-g) package_name</span><br></pre></td></tr></table></div></figure>        <h3 id="检查更新"   >          <a href="#检查更新" class="heading-link"><i class="fas fa-link"></i></a>检查更新</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm outdated (-g --depth=0)</span><br></pre></td></tr></table></div></figure>        <h3 id="设置默认协议"   >          <a href="#设置默认协议" class="heading-link"><i class="fas fa-link"></i></a>设置默认协议</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">set</span> init.license <span class="string">"MIT"</span></span><br></pre></td></tr></table></div></figure>        <h3 id="设置默认作者昵称"   >          <a href="#设置默认作者昵称" class="heading-link"><i class="fas fa-link"></i></a>设置默认作者昵称</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">set</span> init.author.name <span class="string">"Viki"</span></span><br></pre></td></tr></table></div></figure>        <h3 id="设置默认作者邮箱"   >          <a href="#设置默认作者邮箱" class="heading-link"><i class="fas fa-link"></i></a>设置默认作者邮箱</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">set</span> init.author.email <span class="string">"vikiboss@qq.com"</span></span><br></pre></td></tr></table></div></figure>        <h3 id="查看项目主页-如果有的话，无则跳到项目仓库"   >          <a href="#查看项目主页-如果有的话，无则跳到项目仓库" class="heading-link"><i class="fas fa-link"></i></a>查看项目主页(如果有的话，无则跳到项目仓库)</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm home package_name</span><br></pre></td></tr></table></div></figure>        <h3 id="查看项目仓库"   >          <a href="#查看项目仓库" class="heading-link"><i class="fas fa-link"></i></a>查看项目仓库</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm repo package_name</span><br></pre></td></tr></table></div></figure>        <h3 id="移除无关依赖"   >          <a href="#移除无关依赖" class="heading-link"><i class="fas fa-link"></i></a>移除无关依赖</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm prune (package_name) (--production)</span><br></pre></td></tr></table></div></figure>        <h3 id="清理缓存，一般不需要删，除非遇到错误-npm-lt-5"   >          <a href="#清理缓存，一般不需要删，除非遇到错误-npm-lt-5" class="heading-link"><i class="fas fa-link"></i></a>清理缓存，一般不需要删，除非遇到错误 (npm &lt; @5)</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean</span><br></pre></td></tr></table></div></figure>        <h3 id="清理缓存，一般不需要删，除非遇到错误-npm-gt-5"   >          <a href="#清理缓存，一般不需要删，除非遇到错误-npm-gt-5" class="heading-link"><i class="fas fa-link"></i></a>清理缓存，一般不需要删，除非遇到错误 (npm &gt; @5)</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache verify</span><br></pre></td></tr></table></div></figure>        <h3 id="查看项目依赖"   >          <a href="#查看项目依赖" class="heading-link"><i class="fas fa-link"></i></a>查看项目依赖</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls (--depth 0)</span><br></pre></td></tr></table></div></figure>        <h3 id="查看当前的配置"   >          <a href="#查看当前的配置" class="heading-link"><i class="fas fa-link"></i></a>查看当前的配置</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></div></figure>        <h3 id="更新至最新的公测版本"   >          <a href="#更新至最新的公测版本" class="heading-link"><i class="fas fa-link"></i></a>更新至最新的公测版本</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm@latest npm</span><br></pre></td></tr></table></div></figure>        <h3 id="更新至最新的发布版本（比-latest-更新）"   >          <a href="#更新至最新的发布版本（比-latest-更新）" class="heading-link"><i class="fas fa-link"></i></a>更新至最新的发布版本（比 latest 更新）</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm@next npm</span><br></pre></td></tr></table></div></figure>        <h3 id="添加用户信息"   >          <a href="#添加用户信息" class="heading-link"><i class="fas fa-link"></i></a>添加用户信息</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser / npm login</span><br></pre></td></tr></table></div></figure>        <h3 id="添加配置信息"   >          <a href="#添加配置信息" class="heading-link"><i class="fas fa-link"></i></a>添加配置信息</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> foo:port 80</span><br></pre></td></tr></table></div></figure>        <h2 id="关于-npm-链接"   >          <a href="#关于-npm-链接" class="heading-link"><i class="fas fa-link"></i></a>关于 npm 链接</h2>      <p>作者主页地址: <span class="exturl"><a class="exturl__link"   href="https://npmjs.com/~vikiboss"  target="_blank" rel="noopener">https://npmjs.com/~username</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>如 vikiboss 主页: <span class="exturl"><a class="exturl__link"   href="https://npmjs.com/~vikiboss"  target="_blank" rel="noopener">https://npmjs.com/~vikiboss</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>包主页地址: <span class="exturl"><a class="exturl__link"   href="https://npmjs.com/package/axios"  target="_blank" rel="noopener">https://npmjs.com/package/package_name</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>如 axios 主页: <span class="exturl"><a class="exturl__link"   href="https://npmjs.com/package/axios"  target="_blank" rel="noopener">https://npmjs.com/package/axios</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python3 小白快速入门</title>
      <link href="2020/09/06/python-basis/"/>
      <url>2020/09/06/python-basis/</url>
      
        <content type="html"><![CDATA[        <h2 id="Python-中的数据类型"   >          <a href="#Python-中的数据类型" class="heading-link"><i class="fas fa-link"></i></a>Python 中的数据类型</h2>      <p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p>Python 是<strong>弱类型</strong>语言，变量的类型是不确定的。</p><p>Python 有<strong>六种</strong>标准数据类型</p>        <h3 id="不可变数据"   >          <a href="#不可变数据" class="heading-link"><i class="fas fa-link"></i></a>不可变数据</h3>      <ol><li><p><code>Number</code> 数字</p><ul><li><code>int</code> 整数 如：1，2，0，-43 （Python3 中的整数大小无限制）</li><li><code>float</code> 小数 如：0.2，-54.0，15.9</li><li><code>bool</code> 布尔数（1 代表 true，2 代表 false）如：false 或 true 之一<blockquote><p>在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。</p></blockquote></li><li><code>complex</code> 复数 如 1+4j，7j，3</li></ul></li><li><p><code>String</code> 字符串</p><p>Python 中的字符串用单引号 <code>&#39;</code> 或双引号 <code>&quot;</code> 括起来，同时使用反斜杠 <code>\</code> 转义特殊字符。和其他语言类似，从 0 开始索引，-1 代表最后一个字符。同时还可以用 <code>:</code> 截取片段，左闭右开取值。</p><p>示例如下</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'VikiVikiViki'</span></span><br><span class="line">str[<span class="number">0</span>] <span class="comment"># V</span></span><br><span class="line">str[<span class="number">-2</span>] <span class="comment"># k</span></span><br><span class="line">str[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">#ik</span></span><br><span class="line">str[<span class="number">4</span>:<span class="number">-2</span>] <span class="comment"># VikiVi</span></span><br><span class="line">str2 = <span class="string">'Viki\nHello!'</span> <span class="comment"># 字符串被转义\n为换行</span></span><br><span class="line">str3 = <span class="string">r'Viki\nHello!'</span> <span class="comment"># 防止字符串内容被转义</span></span><br></pre></td></tr></table></div></figure></li><li><p><code>Tuple</code> 元组</p></li></ol>        <h3 id="可变数据"   >          <a href="#可变数据" class="heading-link"><i class="fas fa-link"></i></a>可变数据</h3>      <ol start="4"><li><code>List</code> 列表</li><li><code>Set</code> 集合</li><li><code>Dictionary</code> 字典</li></ol><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">1</span>， <span class="number">2</span>， <span class="number">3</span>] <span class="comment"># list是数组 使用方括号</span></span><br><span class="line">list[<span class="number">0</span>] <span class="comment"># 1 从0开始 通过索引获取每一项</span></span><br><span class="line">list[<span class="number">1</span>] = <span class="string">'2'</span> <span class="comment"># list的每一项可以修改 且数据类型可不同</span></span><br><span class="line">list[<span class="number">-1</span>] <span class="comment"># 3 负数代表从后开始索引 -1为最后一项的索引</span></span><br><span class="line"></span><br><span class="line">tuple = (<span class="number">1</span>， <span class="number">2</span>， <span class="number">3</span>) <span class="comment"># tuple是元组 使用圆括号</span></span><br><span class="line">tuple[<span class="number">0</span>] <span class="comment"># 结果为1 从0开始 通过索引获取每一项</span></span><br><span class="line">tuple[<span class="number">1</span>] = <span class="number">3</span> <span class="comment"># 运行报错 元组不支持赋值 其内的元素不允许修改</span></span><br></pre></td></tr></table></div></figure>        <h2 id="Python-中的注释"   >          <a href="#Python-中的注释" class="heading-link"><i class="fas fa-link"></i></a>Python 中的注释</h2>      <p>注释可以帮助其他人阅读程序，通常用于概括算法、确认变量的用途或者阐明难以理解的代码段。</p><p>在 Python 中，单行注释使用 <code>#</code></p><p>多行注释在需要注释的首尾使用三个单引号<code>&#39;&#39;&#39;</code>或双引号<code>&quot;&quot;&quot;</code></p><p>实例</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">这是一个多行注释</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这也是一个多行注释</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></div></figure>        <h2 id="运算符"   >          <a href="#运算符" class="heading-link"><i class="fas fa-link"></i></a>运算符</h2>              <h3 id="算数运算符"   >          <a href="#算数运算符" class="heading-link"><i class="fas fa-link"></i></a>算数运算符</h3>      <p>除了常见的<code>+</code> <code>-</code> <code>*</code> <code>/</code> Python3 还内置:</p><ul><li><code>%</code> 求模运算</li><li><code>**</code> 幂运算</li><li><code>//</code> 整除(返回商的整数部分)</li></ul><p>运算实例如下</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">13</span></span><br><span class="line">y = <span class="number">5</span></span><br><span class="line">x + y <span class="comment"># 18</span></span><br><span class="line">x - y <span class="comment"># 8</span></span><br><span class="line">x * y <span class="comment"># 65</span></span><br><span class="line">x / y <span class="comment"># 2.6 (在Python2中是2)</span></span><br><span class="line">x % y <span class="comment"># 3</span></span><br><span class="line">x ** y <span class="comment"># 371293(13的五次方)</span></span><br><span class="line">x // y <span class="comment"># 2</span></span><br></pre></td></tr></table></div></figure>        <h3 id="比较运算符"   >          <a href="#比较运算符" class="heading-link"><i class="fas fa-link"></i></a>比较运算符</h3>      <p>Python3 中的比较运算符有:</p><ul><li><code>==</code> 比较对象是否相等</li><li><code>!=</code> 比较两个对象是否不相等</li><li><code>&gt;</code> 、<code>&gt;=</code> 判断是否大于、大于等于</li><li><code>&lt;</code> 、<code>&lt;=</code> 判断是否小于、小于等于</li></ul><p>实例如下</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">a == b <span class="comment"># false</span></span><br><span class="line">a != b <span class="comment"># true</span></span><br><span class="line">a &gt; b <span class="comment"># flase</span></span><br><span class="line">a &gt;= b <span class="comment"># false</span></span><br><span class="line">a &lt; b <span class="comment"># true</span></span><br><span class="line">a &lt;= b <span class="comment"># true</span></span><br></pre></td></tr></table></div></figure>        <h3 id="赋值运算符"   >          <a href="#赋值运算符" class="heading-link"><i class="fas fa-link"></i></a>赋值运算符</h3>      <ul><li><code>=</code> 简单的赋值运算符</li><li><code>+=</code> 加法赋值运算符</li><li><code>-=</code> 减法赋值运算符</li><li><code>*=</code> 乘法赋值运算符</li><li><code>/=</code> 除法赋值运算符</li><li><code>%=</code> 取模赋值运算符</li><li><code>**=</code> 幂赋值运算符</li><li><code>//=</code> 取整除赋值运算符</li><li><strong><code>:=</code> 赋值表达式运算符（也叫海象运算符）（Python3.8 新增）</strong></li></ul><p>实例</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span> <span class="comment"># 将1赋值给a</span></span><br><span class="line">b = <span class="number">2</span> <span class="comment"># 将2赋值给b</span></span><br><span class="line">b += a <span class="comment"># 等价于 b = b + a</span></span><br><span class="line">b -= a <span class="comment"># 等价于 b = b - a</span></span><br><span class="line">b *= a <span class="comment"># 等价于 b = b * a</span></span><br><span class="line">b /= a <span class="comment"># 等价于 b = b / a</span></span><br><span class="line">b %= a <span class="comment"># 等价于 b = b % a</span></span><br><span class="line">b **= a <span class="comment"># 等价于 b = b ** a</span></span><br><span class="line">b //= a <span class="comment"># 等价于 b = b // a</span></span><br><span class="line"><span class="comment"># 原代码（需单独赋值）</span></span><br><span class="line">length = len([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">if</span> length &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'the length of the array is'</span>, length)</span><br><span class="line"><span class="comment"># 使用海象运算符后可在表达式内部为变量赋值</span></span><br><span class="line"><span class="keyword">if</span> length := len([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]):</span><br><span class="line">    print(<span class="string">'the length of the array is'</span>, length)</span><br></pre></td></tr></table></div></figure>        <h3 id="逻辑运算符"   >          <a href="#逻辑运算符" class="heading-link"><i class="fas fa-link"></i></a>逻辑运算符</h3>      <ul><li><code>and</code> 逻辑与运算</li><li><code>or</code> 逻辑或运算</li><li><code>not</code> 逻辑非运算</li></ul><p>实例</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = true</span><br><span class="line">y = false</span><br><span class="line">x <span class="keyword">and</span> y <span class="comment"># false</span></span><br><span class="line">x <span class="keyword">or</span> y <span class="comment"># true</span></span><br><span class="line"><span class="keyword">not</span>(a <span class="keyword">and</span> b) <span class="comment"># true</span></span><br></pre></td></tr></table></div></figure>        <h3 id="成员运算符"   >          <a href="#成员运算符" class="heading-link"><i class="fas fa-link"></i></a>成员运算符</h3>      <ul><li><code>in</code> 在指定的序列中找到值返回 True，否则返回 False</li><li><code>not in</code> 在指定的序列中没有找到值返回 True，否则返回 False</li></ul><p>实例</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">x = <span class="number">2</span></span><br><span class="line">x <span class="keyword">in</span> list <span class="comment"># true</span></span><br><span class="line">x <span class="keyword">not</span> <span class="keyword">in</span> list <span class="comment"># false</span></span><br></pre></td></tr></table></div></figure>        <h3 id="身份运算符"   >          <a href="#身份运算符" class="heading-link"><i class="fas fa-link"></i></a>身份运算符</h3>      <ul><li><code>is</code> 判断是否引用自一个对象</li><li><code>is not</code> 判断是否引用自不同对象</li></ul><p>实例</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line">b <span class="keyword">is</span> a <span class="comment"># True</span></span><br><span class="line">b == a <span class="comment"># True</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b <span class="keyword">is</span> a <span class="comment"># False</span></span><br><span class="line">b == a <span class="comment"># True</span></span><br></pre></td></tr></table></div></figure>        <h3 id="位运算符"   >          <a href="#位运算符" class="heading-link"><i class="fas fa-link"></i></a>位运算符</h3>      <p>位运算就是直接对整数的二进制位进行操作</p><ul><li><code>&amp;</code> 按位与运算符 用法 <code>a &amp; b</code></li><li><code>|</code> 按位或运算符 用法 <code>a | b</code></li><li><code>^</code> 按位异或运算符 用法 <code>a ^ b</code></li><li><code>~</code> 按位取反运算符 用法 <code>~a</code></li><li><code>&lt;&lt;</code> 左移运算符 用法：<code>a &lt;&lt; 2</code></li><li><code>&gt;&gt;</code> 右移运算符 用法：<code>a &lt;&lt; 2</code></li></ul><p>这一部分运算符用的相对较少，不做过多补充</p>        <h3 id="运算符优先级"   >          <a href="#运算符优先级" class="heading-link"><i class="fas fa-link"></i></a>运算符优先级</h3>      <p>所谓优先级，类似于数学里的加减乘除的运算顺序，各运算符优先级如下</p><p>算数运算符&gt;位运算符&gt;比较运算符&gt;赋值运算符&gt;身份运算符&gt;成员运算符&gt;逻辑运算符</p><p>常见运算符的顺序都比较简单,不过多说明</p><blockquote><p>// 2020/9/6 待续</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 介绍以及 Python2 与 Python3 的区别</title>
      <link href="2020/09/05/python-introduce-and-diff/"/>
      <url>2020/09/05/python-introduce-and-diff/</url>
      
        <content type="html"><![CDATA[        <h3 id="关于-Python"   >          <a href="#关于-Python" class="heading-link"><i class="fas fa-link"></i></a>关于 Python</h3>      <p>Python 是一种<strong>面向对象、解释型、动态数据类型</strong>的高级程序设计脚本语言，同时也是一种功能强大而完善的通用型语言。</p><p>它因为具有<strong>语法简单、易于学习、可读性强、功能强大（模块众多）、可扩展性强、开源免费、跨平台</strong>等优势而被很多程序员青睐。</p><p>Python 简单的语法使得其代码量相对较少，能够让程序员专注于业务逻辑而不是纠结于编程语言语法本身。</p><p>但是，<strong>Nothing is perfect</strong> ，Python 也是这样</p><p>作为一门解释性语言，<strong>运行慢自然是 Python 的主要缺点之一</strong>，但目前计算机硬件的性能、计算速度在不断增强，这点往往不会带来大问题，大多数情况，用户往往感觉不到差异。</p><p>其他的一些不足：不具备完整的语法检查、暴露源代码（解释性语言通病）、语法要求强制缩进等</p>        <h3 id="Python-用途广泛"   >          <a href="#Python-用途广泛" class="heading-link"><i class="fas fa-link"></i></a>Python 用途广泛</h3>      <p><strong>Web 开发</strong></p><p>如豆瓣、知乎、果壳网、Google、NASA、YouTube、Facebook 等都将 Python 作为主要开发语言</p><p><strong>服务端</strong></p><p>App 与的游戏后台等</p><p><strong>网络爬虫</strong></p><p>快速抓取互联网数据</p><p><strong>人工智能</strong></p><p>相较于其他编程语言，Python 适合人工智能领域，得益于其很多适合用来做人工智能的库，如 <code>numpy</code>、<code>pybrain</code> 和 <code>matplotlib</code> 等，但是计算密集型以及调用硬件底层接口的核心算法还是得靠 <code>C/C++</code> 来实现</p><p><strong>数据分析</strong></p><p>在数据分析处理方面，Python 有很完备的生态环境。涉及到的分布式计算、数据可视化、数据库操作等，Python 中都有成熟的模块可以选择完成其功能。</p><p><strong>其他的用途</strong></p><p>自动化运维、系统编程、图形处理、数学处理、文本处理、数据库编程、网络编程、Web 编程、多媒体应用、黑客编程……</p><blockquote><p>Python 最最强大的功能当然是 <del><strong>用来做线代作业</strong></del></p></blockquote>        <h3 id="Python2-与-Python3-的区别"   >          <a href="#Python2-与-Python3-的区别" class="heading-link"><i class="fas fa-link"></i></a>Python2 与 Python3 的区别</h3>      <p>Python3 不兼容 Python2，为了尽可能兼容早期用 Python2 写的<br>Python 程序，官方发布了 Python2.6 作为一个过度版本，其往后的版本完全支持 Python2 的同时兼容了部分 Python3 的语法。</p><p><strong>Python3 在部分函数上做了修改</strong></p><p>例如 <code>print</code></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python2 的 print 语句</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'This is a Feature of Python2'</span></span><br><span class="line"><span class="comment"># Python 2.6/2.7 兼容Python3的print()函数</span></span><br><span class="line">print(<span class="string">'foo'</span>) <span class="comment"># 只可以存在一个参数</span></span><br><span class="line"><span class="comment"># Python3 将Python2的print语句换为了 print() 函数</span></span><br><span class="line">print(<span class="string">'Foo'</span>， <span class="number">1</span> + <span class="number">1</span>) <span class="comment"># 支持多个参数</span></span><br></pre></td></tr></table></div></figure><p><strong>Python3 增强了对 <code>Unicode</code> 的支持</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下语句符合Python3的语法</span></span><br><span class="line">浩浩 = <span class="string">'Viki'</span></span><br><span class="line">print(浩浩)</span><br></pre></td></tr></table></div></figure><p><strong>对<code>/</code>除法的处理方式不同</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Python2中只有出现浮点数最后结果才是浮点数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>/<span class="number">3</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1.0</span>/<span class="number">3</span></span><br><span class="line"><span class="number">0.333333333333</span></span><br><span class="line"><span class="comment"># 在Python3中始终是进行精确的除法</span></span><br><span class="line"><span class="comment"># 无论是否出现浮点数最后结果都是浮点数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>/<span class="number">3</span></span><br><span class="line"><span class="number">0.3333333333333333</span></span><br></pre></td></tr></table></div></figure><p><strong>数据类型变动</strong></p><p>Python3 仅存在一种整数类型—— <code>int</code> ，去除了 Python2 中的 long（长整数） 类型，相当于扩充了 <code>int</code> 型数据的长度</p><p>新增了 <code>bytes</code> 类型，对应于 Python2 的八位串</p><p><code>str</code> 对象和 <code>bytes</code> 对象可以使用 <code>.encode()</code> (str -&gt; bytes) 或 <code>.decode()</code> (bytes -&gt; str)方法相互转化</p><p><code>dict</code> 的<code>.keys()</code>、<code>.items()</code> 和<code>.values()</code>方法返回迭代器</p><blockquote><p><code>//</code>（整除，也叫地板除）运算 2 和 3 的版本表现是一样的</p></blockquote><p><strong>异常处理不同</strong></p><p>在 Python 3 中使用 <code>as</code> 作为关键词，捕获异常的语法由 <code>except exc， var</code> 改为 <code>except exc as var</code>。<br>使用语法 <code>except (exc1， exc2) as var</code> 可以同时捕获多种类别的异常。 Python 2.6 已经支持这两种语法。</p><p><strong>将 <code>xrange</code> 换为 <code>range</code></strong></p><p>Python3 用更规范的 <code>range</code> 函数代替 Python2 的 <code>xrange</code> 函数。在 Python 3 中使用 <code>xrange()</code> 会抛出命名异常</p><p><strong>进制字面量表示不同</strong></p><p>Python3 的字面量表示更规范</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python2</span></span><br><span class="line"><span class="number">0777</span> <span class="comment"># 数字0前缀表示八进制</span></span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line"><span class="number">0o777</span> <span class="comment"># 八进制的0后面必须加个小写字母o</span></span><br><span class="line"><span class="number">0b101</span> <span class="comment"># 二进制的0后面必须加个小写字母b</span></span><br></pre></td></tr></table></div></figure><p><strong>不等运算符</strong></p><p>Python3 删减了 <code>&lt;&gt;</code> 不等运算符</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python2中</span></span><br><span class="line">a &lt;&gt; b</span><br><span class="line">a != b</span><br><span class="line"><span class="comment"># Python3中</span></span><br><span class="line">a != b</span><br></pre></td></tr></table></div></figure><p><strong>删除了 repr 表达式</strong></p><p>Python2 中的反引号 `` 相当于 repr 函数的作用，而在 Python3 不允许使用反引号充当 <code>repr</code> 函数，只允许使用 <code>repr</code> 函数</p><p><strong>多个模块被改名</strong></p><p>这里就不详细展开说了。</p>        <h3 id="参考文章"   >          <a href="#参考文章" class="heading-link"><i class="fas fa-link"></i></a>参考文章</h3>      <ul><li><span class="exturl"><a class="exturl__link"   href="https://www.runoob.com/python/python-2x-3x.html"  target="_blank" rel="noopener">Python2.x 与 3.x 版本的区别 - 菜鸟教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack4.x 基础</title>
      <link href="2020/08/20/webpack-v4-basis/"/>
      <url>2020/08/20/webpack-v4-basis/</url>
      
        <content type="html"><![CDATA[<p>本篇文章简要地讲解了 <code>webpack 4.x</code> 的入门知识，适合想了解、学习 <code>webpack</code> 的小白</p>        <h3 id="引文"   >          <a href="#引文" class="heading-link"><i class="fas fa-link"></i></a>引文</h3>      <p><code>webpack</code>说白了就是一个打包工具 🔧，可以预先配置好打包设定，并约定好适用于各种不同文件类型的<code>loader</code>，以及可能用到的插件 📥 等，然后其他的事情就交给<code>webpack</code>，它会将你项目中的所有 js 文件、样式 🎨 文件、图片或字体资源等等打包在一起。<code>webpack</code>让开发者的代码更易编写、维护的同时，也提高了生产效率。👍</p>        <h3 id="安装"   >          <a href="#安装" class="heading-link"><i class="fas fa-link"></i></a>安装</h3>      <blockquote><p>在开始之前，请确保安装了 <span class="exturl"><a class="exturl__link"   href="https://nodejs.org/zh-cn/"  target="_blank" rel="noopener">Node.js</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 的较新版本</p></blockquote><ul><li>        <h4 id="全局安装"   >          <a href="#全局安装" class="heading-link"><i class="fas fa-link"></i></a>全局安装</h4>      <p>即：webpack 命令已加入环境变量，全局下可用</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g webpack</span><br><span class="line">npm install -g webpack-cli</span><br></pre></td></tr></table></div></figure></li><li>        <h4 id="本地安装"   >          <a href="#本地安装" class="heading-link"><i class="fas fa-link"></i></a>本地安装</h4>      <p>即：仅在当前项目配置 webpack 的开发环境</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br><span class="line">npm install --save-dev webpack-cli</span><br></pre></td></tr></table></div></figure></li></ul>        <h3 id="配置-npm-脚本"   >          <a href="#配置-npm-脚本" class="heading-link"><i class="fas fa-link"></i></a>配置 npm 脚本</h3>      <p>编辑项目根目录下的<code>package.json</code>文件。</p><blockquote><p>package.json 是 nodejs 项目的描述文件，详见<span class="exturl"><a class="exturl__link"   href="https://docs.npmjs.com/files/package.json"  target="_blank" rel="noopener">npm 文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p></blockquote><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "webpack": "webpack --config webpack.config.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="Webpack-配置"   >          <a href="#Webpack-配置" class="heading-link"><i class="fas fa-link"></i></a>Webpack 配置</h3>      <p>可在项目根目录下建一个 <code>webpack.config.js</code> 文件作为 <code>webpack</code> 的配置文件，<code>webpack</code>在执行的时候会读取这个配置文件并将其作为打包的配置进行打包。更复杂的写法及功能后面将会介绍到。</p>        <h5 id="基础配置示例"   >          <a href="#基础配置示例" class="heading-link"><i class="fas fa-link"></i></a>基础配置示例</h5>      <figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>); <span class="comment">// 引入path，用来更规范地指定路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">"development"</span>, <span class="comment">// 规定当前模式，生产模式或者开发模式</span></span><br><span class="line">  entry: <span class="string">'./scr/index.js'</span>, <span class="comment">// 指定入口文件，webpack的打包从这个文件开始</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 指定输出的信息，文件名，路径等</span></span><br><span class="line">    name: <span class="string">'main.js'</span>,</span><br><span class="line">    <span class="comment">// 使用path来更合理地指定一个输出文件的路径</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="加载-CSS"   >          <a href="#加载-CSS" class="heading-link"><i class="fas fa-link"></i></a>加载 CSS</h3>              <h5 id="安装-1"   >          <a href="#安装-1" class="heading-link"><i class="fas fa-link"></i></a>安装</h5>      <p>先将<code>style-loader</code>和<code>css-loader</code>作为生产依赖（dev）安装</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev  style-loader css-loader</span><br></pre></td></tr></table></div></figure>        <h5 id="配置"   >          <a href="#配置" class="heading-link"><i class="fas fa-link"></i></a>配置</h5>      <figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="comment">// 使用正则对文件后缀名进行匹配，区分不同的文件</span></span><br><span class="line">        <span class="comment">// 在'use'数组里配置专门处理匹配到的文件类型所需的loader</span></span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h5 id="使用示例"   >          <a href="#使用示例" class="heading-link"><i class="fas fa-link"></i></a>使用示例</h5>      <figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./style.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"css file has been loaded successfully!"</span>);</span><br></pre></td></tr></table></div></figure><figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">green</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span>this element's backround color should be green.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="加载其他资源（图片，字体等）"   >          <a href="#加载其他资源（图片，字体等）" class="heading-link"><i class="fas fa-link"></i></a>加载其他资源（图片，字体等）</h3>      <p><code>file-loader</code> 和 <code>url-loader</code> 可以接收并加载任何文件，然后将其输出到构建目录。</p><p>配置方法与加载<code>css</code>类似</p>        <h5 id="安装-2"   >          <a href="#安装-2" class="heading-link"><i class="fas fa-link"></i></a>安装</h5>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev file-loader</span><br></pre></td></tr></table></div></figure>        <h5 id="配置-1"   >          <a href="#配置-1" class="heading-link"><i class="fas fa-link"></i></a>配置</h5>      <figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">        use: [<span class="string">"file-loader"</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class="line">        use: [<span class="string">"file-loader"</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>然后就可以像引入其他模块一样引入图片和字体资源并使用了，示例如下</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> MyImage <span class="keyword">from</span> <span class="string">"./assests/dog.png"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ImageElement = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">ImageElemegt.src = MyImage; <span class="comment">// or ImageElement.setAttribute('src', MyImage);</span></span><br></pre></td></tr></table></div></figure>        <h2 id="HtmlWebpackPlugin"   >          <a href="#HtmlWebpackPlugin" class="heading-link"><i class="fas fa-link"></i></a>HtmlWebpackPlugin</h2>      <p>要引用打包好的 js 文件，一种常规且基础的方法是：直接在<code>index.html</code>文件里引用我们打包好的文件（如下示例）。但是有时候我们要打包成很多个文件，要让它正确被引用，我们就要重新手动更改它（<code>main.js</code>）的名字，比较麻烦，一种解决方案就是：使用<code>HtmlWebpackPlugin</code>这个 plugin。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h5 id="安装-3"   >          <a href="#安装-3" class="heading-link"><i class="fas fa-link"></i></a>安装</h5>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev  html-webpack-plugin</span><br></pre></td></tr></table></div></figure>        <h5 id="配置-2"   >          <a href="#配置-2" class="heading-link"><i class="fas fa-link"></i></a>配置</h5>      <figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">"./src/index.js"</span>,</span><br><span class="line">    print: <span class="string">"./src/print.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">"Output Management"</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"[name].bundle.js"</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p><code>HtmlWebpackPlugin</code> 会默认生成新 <code>index.html</code> 文件，并用新生成的 <code>index.html</code> 文件，把原来的替换。</p>        <h3 id="启用观察模式"   >          <a href="#启用观察模式" class="heading-link"><i class="fas fa-link"></i></a>启用观察模式</h3>      <p>简单地说，就是修改已存在的代码的时候能够及时自动执行 webpack 打包命令进行更新，开启的方式很简单，加上 <code>--watch</code> 参数即可，或者在<code>npm</code>的 <code>scripts</code>里的<code>webpack</code>相应字段中添加<code>--watch</code>，像这样 👇</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"webpack --config webpack.config.js --watch"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></div></figure><p>这样 <code>webpack</code> 便会开启观察模式，即在检测到代码被修改的时候重新编译代码，然而却不会退出命令行。</p>        <h3 id="启用-webpack-dev-server"   >          <a href="#启用-webpack-dev-server" class="heading-link"><i class="fas fa-link"></i></a>启用 webpack-dev-server</h3>      <p>webpack-dev-server 本质是一个基于<code>node</code>的简单本地 web 服务器，能够在请求的内容发生改变时及时更新（不用手动在浏览器刷新网页）。如果你是<code>vscode</code>用户，笔者更推荐使用<strong><code>Live Server</code>扩展</strong>来达到这个目的。<code>Live Server</code>的详细使用方式参考<span class="exturl"><a class="exturl__link"   href="https://ritwickdey.github.io/vscode-live-server/"  target="_blank" rel="noopener">官方文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h5 id="安装-4"   >          <a href="#安装-4" class="heading-link"><i class="fas fa-link"></i></a>安装</h5>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></div></figure>        <h5 id="配置-3"   >          <a href="#配置-3" class="heading-link"><i class="fas fa-link"></i></a>配置</h5>      <figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.json</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">"./dist"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>以上配置告知 <code>webpack-dev-server</code>，在 <code>localhost:8080</code> 下建立服务，并将 <code>dist</code> 目录下的文件作为可访问文件（无特殊指明，默认加载目录下的<code>index.html</code>文件）。</p>        <h5 id="添加-npm-脚本"   >          <a href="#添加-npm-脚本" class="heading-link"><i class="fas fa-link"></i></a>添加 npm 脚本</h5>      <figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack-dev-server --open"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="启用-HMR"   >          <a href="#启用-HMR" class="heading-link"><i class="fas fa-link"></i></a>启用 HMR</h3>      <p>模块热替换(Hot Module Replacement 或 HMR)是 <code>webpack</code>提供的最有用的功能之一。它允许在运行时更新各种模块，而无需进行完全刷新。</p><p>（webpack 4.x 及之后的版本貌似已经默认支持了？小声 bb）</p><blockquote><p>前提是启用了 <code>webpack-dev-server</code></p></blockquote>        <h5 id="配置-4"   >          <a href="#配置-4" class="heading-link"><i class="fas fa-link"></i></a>配置</h5>      <figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.json</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">"./dist"</span>,</span><br><span class="line">    hot: <span class="literal">true</span>, <span class="comment">// 👈 关键在这</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><blockquote><p>它（HMR）与观察模式的区别在于：观察模式每次在文件更改后重新编译并更新文件，而模块热替换则不重新编译，只是热替换改动的模块</p></blockquote>        <h3 id="Tree-Shaking"   >          <a href="#Tree-Shaking" class="heading-link"><i class="fas fa-link"></i></a>Tree Shaking</h3>      <p><strong>tree shaking</strong> 是一个术语，通常用于描述移除 <code>JavaScript</code>上下文中的未引用代码(dead-code)。简单来说就是在打包过程忽略没有被使用的代码，而只打包被引用的代码从而减小总包的大小，以提升加载速度和用户体验。</p><blockquote><p>请注意，有些文件被<code>tree shaking</code>操作处理后可能会产生副作用，请确保将不确定的文件标记在副作用（<code>sideEffects</code>）列表。</p></blockquote><p>修改<code>package.json</code>文件，将对应文件标记为有副作用(side-effect)。</p><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sideEffects"</span>: [</span><br><span class="line">    <span class="string">"./src/some-side-effectful-file.js"</span>，</span><br><span class="line">    <span class="string">"*.css"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>如果所有代码都不包含副作用，我们就可以简单地将该属性标记为 <code>false</code>，来告知 <code>webpack</code>，它可以安全地删除未用到的 <code>export</code>导出。</p><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sideEffects"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>其实在真正项目上线的时候，是使用<strong>压缩输出</strong>的。</p><p>只需将<code>webpack.config.js</code>配置文件的<code>mode</code>字段从<code>development</code>改为<code>production</code>即可轻松切换到<strong>压缩输出</strong>。</p><p>启用了<code>Tree Shaking</code>的项目在压缩输出时，<code>webpack</code>不会将无关代码打包进项目。</p>        <h3 id="脚本示例参考"   >          <a href="#脚本示例参考" class="heading-link"><i class="fas fa-link"></i></a>脚本示例参考</h3>      <figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack --config webpack.config.js --watch &amp;&amp;webpack-dev-server --open"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="Want-to-learn-more？🤔"   >          <a href="#Want-to-learn-more？🤔" class="heading-link"><i class="fas fa-link"></i></a>Want to learn more？🤔</h3>      <p>参考<span class="exturl"><a class="exturl__link"   href="https://www.webpackjs.com/guides/"  target="_blank" rel="noopener">官方指南</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>package.json 文件详解</title>
      <link href="2020/04/23/package-json/"/>
      <url>2020/04/23/package-json/</url>
      
        <content type="html"><![CDATA[<p>此篇文章适合于对 <code>JavaScript</code> <code>nodejs</code> <code>npm</code> <code>json</code> 有一定了解，但不清楚 <code>package.json</code> 文件具体作用及其含义的读者</p>        <h2 id="什么是-package-json-文件？😱"   >          <a href="#什么是-package-json-文件？😱" class="heading-link"><i class="fas fa-link"></i></a>什么是 package.json 文件？😱</h2>      <p><code>nodejs</code> 的项目遵循<strong>模块化</strong>的架构，<code>package.json</code> 文件是用来<strong>描述项目的相关信息</strong>，便于 <code>npm</code>、<code>yarn</code> 等包管理工具对项目进行操作。简单的来理解，就是每个项目都可以被叫做“包”，<code>package.json</code> 则是用来描述包信息的一个文件，一般存在于项目的根目录下。</p>        <h2 id="直接上个实例-🎉"   >          <a href="#直接上个实例-🎉" class="heading-link"><i class="fas fa-link"></i></a>直接上个实例 🎉</h2>      <p><code>package.json</code> 文件本身是 <code>json</code> 文件，当然也遵循 <code>json</code> 的语法</p><blockquote><p>JSON 语法参考链接 =&gt; <span class="exturl"><a class="exturl__link"   href="https://www.runoob.com/json/json-syntax.html"  target="_blank" rel="noopener">JSON 基础语法 - 菜鸟教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json 文件内容</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"demo"</span>, <span class="comment">// 包名，必须，字母小写，无空格，下划线、横线可选</span></span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.1.0"</span>, <span class="comment">// 版本号，必须</span></span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Viki"</span>, <span class="comment">// 作者信息</span></span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"source code repo"</span>, <span class="comment">// 包描述</span></span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"main.js"</span>, <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>, <span class="comment">// 遵循的协议</span></span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="comment">// 自定义脚本</span></span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"react-native run-android"</span> <span class="comment">// 脚本示例</span></span><br><span class="line">    <span class="comment">// ... 其他自定义脚本</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="comment">// 生产依赖(项目正式上线时所依赖的包)</span></span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^16.13.1"</span> <span class="comment">// 表示兼容 react 的16.13.1版本</span></span><br><span class="line">    <span class="comment">// ... 其他生产依赖</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="comment">// 项目仓库信息</span></span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"git@github.com:vikiboss/blog.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="comment">// 开发依赖(开发和测试环境中依赖的包)</span></span><br><span class="line">    <span class="attr">"@babel/core"</span>: <span class="string">"~7.0.0"</span></span><br><span class="line">    <span class="comment">// ... 其他开发依赖</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ... 以上是常见的描述信息，还可在此添加其他自定义的描述信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="它有什么用？🤔"   >          <a href="#它有什么用？🤔" class="heading-link"><i class="fas fa-link"></i></a>它有什么用？🤔</h2>      <p>它<strong>配置和描述了该如何与项目进行交互、运行</strong>。包管理器（<code>npm</code>、<code>yarn</code>等）也可以通过它来<strong>识别项目并分析出如何处理项目的依赖关系</strong>。当你执行<code>npm instal</code>或者<code>yarn</code>来安装依赖的时候，就是通过这个文件来识别。此外，如果你的项目需要发布到 <code>npm</code> 的 registry 上供别人使用，也需要通过这个文件来<strong>提供项目的信息</strong>。</p><blockquote><p>在 npm 5.x 及以上还会生成一个 package-lock.json 文件，它用来描述更加确切的版本信息。package.json 文件有缺陷，只能锁定大版本，也就是版本号的第一位，并不能锁定后面的小版本，每次 npm install 拉取的是该大版本下的最新的版本，为了稳定性考虑我们几乎是不敢随意升级依赖包的，这将导致多出来很多工作量，测试/适配等，所以 package-lock.json 文件出来了，当你每次安装一个依赖的时候就锁定在你安装的这个版本。</p></blockquote>        <h2 id="自定义字段-🎨"   >          <a href="#自定义字段-🎨" class="heading-link"><i class="fas fa-link"></i></a>自定义字段 🎨</h2>      <p><strong>package.json</strong> 文件中的字段不是固定的。如果你要发布的话，那就只有 <code>name</code> 和 <code>version</code> 是必须的，其他可选，且<strong>可以根据需要自定义添加</strong>。需要的时候可被其他文件引用。如果不需要发布，则任何都是可选的，且建议将<code>private</code>字段设置为<code>true</code>并移除<code>main</code>入口，这样可以防止代码意外发布（示例在下方，加减分别代表增删）。</p><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">+   "private": true,</span><br><span class="line">-   "main": "index.js",</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>例如：博客项目可能还需要 <code>&quot;title&quot;:&quot;Viki&#39;s Blog&quot;</code> 类似的字段</p></blockquote><p>其他字段参考： <code>keywords</code>、<code>contributors</code>、<code>homepage</code>、<code>preferGlobal</code>、<code>style</code>、<code>bin</code>、<code>bugs</code>、<code>config</code>、<code>browser</code>、<code>engines</code>、<code>man</code>、<code>peerDependencies</code></p>        <h2 id="脚本（scripts）字段-👟"   >          <a href="#脚本（scripts）字段-👟" class="heading-link"><i class="fas fa-link"></i></a>脚本（scripts）字段 👟</h2>      <p>这个字段约定了什么时候用<code>npm start</code>，<code>npm run dev</code>应该执行什么，或者说它告诉了程序员<code>npm start</code>运行的是什么命令。使用的时候可根据需要在此自定义。</p><p>例如：若一个项目的 <code>package.json</code> 如下</p><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"demo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"cd app &amp;&amp; react-native run-android"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>则在项目路径下运行<code>npm run start</code>或者<code>yarn start</code>时，等效于执行<code>cd app</code>进入 <code>app</code> 目录，然后执行<code>react-native run-android</code></p>        <h2 id="版本描述方式-🔨"   >          <a href="#版本描述方式-🔨" class="heading-link"><i class="fas fa-link"></i></a>版本描述方式 🔨</h2>      <p>常见的版本描述方式有以下几种</p><div class="table-container"><table><thead><tr><th><code>具体的版本</code></th><th>比如<code>1.2.2</code>，遵循“<strong>大版本.次要版本.小版本</strong>”的格式规定，安装时只安装指定版本。</th></tr></thead><tbody><tr><td><code>~ + 版本</code></td><td><strong>比如<code>~1.2.2</code>，表示安装 1.2.x 的最新版本（不低于 1.2.2），但是不安装 1.3.x，也就是说安装时不改变大版本号和次要版本号。</strong></td></tr><tr><td><code>^ + 版本</code></td><td><strong>比如<code>ˆ1.2.2</code>，表示安装 1.x.x 的最新版本（不低于 1.2.2），但是不安装 2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为 0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</strong></td></tr><tr><td><code>latest</code></td><td><strong>安装最新版本。</strong></td></tr></tbody></table></div>        <h2 id="如何生成？🤒"   >          <a href="#如何生成？🤒" class="heading-link"><i class="fas fa-link"></i></a>如何生成？🤒</h2>      <ul><li>手动写ㄟ( ▔, ▔ )ㄏ</li></ul><p>新建一个文本文件并修改文件名和后缀名为<code>package.json</code></p><ul><li>自动生成(～￣ ▽ ￣)～</li></ul><p>通过<code>npm init</code>新建，前提是已经配置好了 <code>npm</code> 的环境</p>        <h2 id="想了解更多-🙃"   >          <a href="#想了解更多-🙃" class="heading-link"><i class="fas fa-link"></i></a>想了解更多? 🙃</h2>      <blockquote><p>强烈推荐阅读 =&gt; <span class="exturl"><a class="exturl__link"   href="https://javascript.ruanyifeng.com/nodejs/packagejson.html"  target="_blank" rel="noopener" title="package.json 文件 - 阮一峰">package.json 文件 - 阮一峰</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h2 id="参考文章-👍"   >          <a href="#参考文章-👍" class="heading-link"><i class="fas fa-link"></i></a>参考文章 👍</h2>      <ul><li><p><span class="exturl"><a class="exturl__link"   href="https://javascript.ruanyifeng.com/nodejs/packagejson.html"  target="_blank" rel="noopener" title="package.json 文件 - 阮一峰">package.json 文件 - 阮一峰</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li><li><p><span class="exturl"><a class="exturl__link"   href="https://docs.npmjs.com/files/package.json"  target="_blank" rel="noopener" title="package.json - npm">package.json - npm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li><li><p><span class="exturl"><a class="exturl__link"   href="https://www.lagou.com/lgeduarticle/43699.html"  target="_blank" rel="noopener" title="package.json 详解 - 拉勾">package.json 详解 - 拉勾</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li><li><p><span class="exturl"><a class="exturl__link"   href="https://juejin.im/post/5ddf97986fb9a071ac1a0b09#heading-2"  target="_blank" rel="noopener" title="package.json 详解 - 掘金">package.json 详解 - 掘金</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2020-Hackthon总结(RN项目)</title>
      <link href="2020/04/21/react-native-lingji/"/>
      <url>2020/04/21/react-native-lingji/</url>
      
        <content type="html"><![CDATA[        <h2 id="2020-Hackthon-总结-RN-项目"   >          <a href="#2020-Hackthon-总结-RN-项目" class="heading-link"><i class="fas fa-link"></i></a>2020-Hackthon 总结(RN 项目)</h2>              <h3 id="前言"   >          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a>前言</h3>      <p>这次家园举办的 <strong>2020hackthon 大赛</strong>的主题是“故事”，经过团队的讨论，我们最终的想法是做一个<strong>以同人内容为主的的创作平台</strong>。经过思考后，我选用的是 <code>React Native</code> ，一来是因为 App 是一个还没接触过的新领域，二来是因为 RN 是基于 <code>React</code> 的语法，最近刚学的 <code>React</code> 也可以从中得到实践。比赛共持续了 17 天，最终成果却很一般（悲伤辣么大）。在这个过程中，由于很多都是新学的技术，然后用的 RN 也是还处于公测期的最新版本，踩了不少的坑，这篇博客目的主要是记录学习 RN 的一个艰辛但难忘的过程，同时也是给后来的同学一个参考。</p><p>文章分为两部分内容。第一部分是对这次 Hackthon 整个项目的剖析（包括用到的一些开源库、一些新的语法、写法以及踩过的坑等等）。第二部分是自己在这个比赛过程中的一些心得体会。</p><p>项目仓库地址：<span class="exturl"><a class="exturl__link"   href="https://github.com/Vikiboss/2020-hackthon"  target="_blank" rel="noopener">lingji - Github</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>本文代码示例只关注核心部分，不保证其完整性。</p>        <h3 id="第一部分：“零几”-RN-项目剖析"   >          <a href="#第一部分：“零几”-RN-项目剖析" class="heading-link"><i class="fas fa-link"></i></a>第一部分：“零几” RN 项目剖析</h3>      <ul><li>        <h4 id="技术栈"   >          <a href="#技术栈" class="heading-link"><i class="fas fa-link"></i></a>技术栈</h4>      <ul><li><code>react</code> 16.11.0 用于构建用户界面的 JavaScript 库</li><li><code>react-native</code> 0.62.1 使用 JavaScript 和 React 编写原生 App 的框架</li><li><code>typescript</code> 3.8.3 微软开源拓展了 JavaScript 语法的编程语言</li><li><code>redux</code> 4.0.5 JavaScript 应用程序的可预测状态容器</li></ul></li><li>        <h4 id="用到的开源库"   >          <a href="#用到的开源库" class="heading-link"><i class="fas fa-link"></i></a>用到的开源库</h4>      <ul><li><code>react-navigation 5.x</code> 管理全局路由</li><li><code>react-native-vector-icons</code> 适用于 RN 的图标聚合库</li><li><code>react-native-action-button</code> 一个 RN 的悬停按钮组件</li><li><code>react-native-fast-image</code> 可替代 RN 原生 Image 组件的第三方组件</li><li><code>redux-persist</code> 封装原生 AsyncStorage 基于 redux 的 RN 持久化储存方案</li><li><code>react-native-image-crop-picker</code> 媒体选取组件(裁剪可选)</li><li><code>axios</code> 公认比较好用的请求库</li><li><code>dayjs</code> 轻量时间处理库</li><li><code>react-native-splash-screen</code> 为 RN 提供开屏图功能的第三方库</li><li><code>react-native-exit-app</code> 提供”退出程序”API 的第三方库</li><li><code>react-native-textinput-effects</code> 一个简洁带动效的输入框组件</li><li><code>react-native-material-ripple</code> 实现 matrial ui 的波纹反馈效果</li><li><code>react-native-elements</code> 一个还行的 RN 的 UI 库</li></ul></li></ul><blockquote><p>引用的所有开源库及版本信息等详见项目的<span class="exturl"><a class="exturl__link"   href="https://github.com/Vikiboss/2020-hackthon/blob/master/package.json"  target="_blank" rel="noopener">package.json</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>文件</p></blockquote><ul><li>        <h4 id="项目简析"   >          <a href="#项目简析" class="heading-link"><i class="fas fa-link"></i></a>项目简析</h4>      <ul><li>目录树</li></ul><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/21/SJzf6H8Ne27o3kQ.jpg"  alt="零几目录.jpg">      </p><ul><li><p>登录状态验证</p><p>用户登陆成功后通过 redux-persist 持久化储存登录信息。在 App 启动时使用 redux-persist 获取登陆信息、判断登录状态并据此设定 navigator 的初始路由跳到相应页面</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; store &#125; from &quot;.&#x2F;redux&#x2F;store&quot;;</span><br><span class="line"></span><br><span class="line">const isLogin &#x3D; store.getState().userInfo.token ? true : false;</span><br><span class="line"></span><br><span class="line">&lt;Navigator initialRouteName&#x3D;&#123;isLogin ? &quot;home&quot; : &quot;auth&quot;&#125;&gt;</span><br><span class="line">  &#123;&#x2F;* ... screens *&#x2F;&#125;</span><br><span class="line">&lt;&#x2F;Navigator&gt;;</span><br></pre></td></tr></table></div></figure></li><li><p>全局路由管理</p><p>通过入口 router 文件引入项目所有的 screen 组件并用一个 navigator 预设的 BottomTab 管理实现管理全局路由的目的，</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStackNavigator &#125; from &quot;@react-navigation&#x2F;stack&quot;;</span><br><span class="line">import HomeRouter from &quot;.&#x2F;screen&quot;;</span><br><span class="line">&#x2F;&#x2F; import ...</span><br><span class="line"></span><br><span class="line">const AppNavigator &#x3D; createStackNavigator();</span><br><span class="line">const &#123; Screen, Navigator &#125; &#x3D; AppNavigator;</span><br><span class="line"></span><br><span class="line">&lt;Navigator&gt;</span><br><span class="line">  &lt;Screen name&#x3D;&quot;Home&quot; component&#x3D;&#123;HomeRouter&#125; &#x2F;&gt;</span><br><span class="line">  &#123;&#x2F;* ... other screens *&#x2F;&#125;</span><br><span class="line">&lt;&#x2F;Navigator&gt;;</span><br></pre></td></tr></table></div></figure></li><li><p>页面切换效果</p><p>使用 react-navigation 提供的水平切换和淡入淡出的预设切换动画</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123; TransitionPresets &#125; from &quot;@react-navigation&#x2F;stack&quot;;</span><br><span class="line">import HomeRouter from &quot;.&#x2F;screen&quot;;</span><br><span class="line"></span><br><span class="line">const animatons &#x3D; &#123;</span><br><span class="line">  slide: TransitionPresets.SlideFromRightIOS,</span><br><span class="line">  fade: TransitionPresets.FadeFromBottomAndroid,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&lt;Navigator screenOptions&#x3D;&#123;&#123; ...animatons.slide &#125;&#125;&gt;</span><br><span class="line">  &lt;Screen</span><br><span class="line">    name&#x3D;&quot;Home&quot;</span><br><span class="line">    component&#x3D;&#123;HomeRouter&#125;</span><br><span class="line">    options&#x3D;&#123;&#123; ...animatons.fade &#125;&#125;</span><br><span class="line">  &#x2F;&gt;</span><br><span class="line">  &#123;&#x2F;* ... screens *&#x2F;&#125;</span><br><span class="line">&lt;&#x2F;Navigator&gt;;</span><br></pre></td></tr></table></div></figure></li></ul><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure></li><li><p>路由跳转及传参</p><p>每一 Screen 接收的组件接受一个 route 参数，其 navigate 属性可用于带参数的路由跳转。使用 navigator 提供的 Hooks 也可达到相应的目的。</p><ul><li><p>使用默认传给 screen 组件的 navigation、route 实现</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Home.tsx</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import &#123; Text &#125; from &quot;react-native&quot;;</span><br><span class="line"></span><br><span class="line">const Home: React.FC &#x3D; (&#123; navigation &#125;) &#x3D;&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Text onPress&#x3D;&#123;() &#x3D;&gt; navigation.navigate(&quot;About&quot;, &#123; msg: &quot;success!&quot; &#125;)&#125;&gt;</span><br><span class="line">      To About</span><br><span class="line">    &lt;&#x2F;Text&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; About.tsx</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import &#123; Text &#125; from &quot;react-native&quot;;</span><br><span class="line"></span><br><span class="line">const About: React.FC &#x3D; (&#123; route &#125;) &#x3D;&gt; &#123;</span><br><span class="line">  return &lt;Text&gt;&#123;route.params.msg&#125;&lt;&#x2F;Text&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure></li><li><p>使用相关的 Hooks 来实现</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Home.tsx</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import &#123; Text &#125; from &quot;react-native&quot;;</span><br><span class="line">import &#123; useNavigation &#125; from &quot;@react-navigation&#x2F;native&quot;;</span><br><span class="line"></span><br><span class="line">const Home: React.FC &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const navigation &#x3D; useNavigation();</span><br><span class="line">  return (</span><br><span class="line">    &lt;Text onPress&#x3D;&#123;() &#x3D;&gt; navigation.navigate(&quot;About&quot;, &#123; msg: &quot;success!&quot; &#125;)&#125;&gt;</span><br><span class="line">      To About</span><br><span class="line">    &lt;&#x2F;Text&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; About.tsx</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import &#123; Text &#125; from &quot;react-native&quot;;</span><br><span class="line">import &#123; useRoute &#125; from &quot;@react-navigation&#x2F;native&quot;;</span><br><span class="line"></span><br><span class="line">const About: React.FC &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const route &#x3D; useRoute();</span><br><span class="line">  return &lt;Text&gt;&#123;route.params.msg&#125;&lt;&#x2F;Text&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>// 2020.4.21 待续</p></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>setTimeout初探</title>
      <link href="2020/04/02/js-setTimeout/"/>
      <url>2020/04/02/js-setTimeout/</url>
      
        <content type="html"><![CDATA[        <h2 id="写出下列三个循环的输出值，并解释原因"   >          <a href="#写出下列三个循环的输出值，并解释原因" class="heading-link"><i class="fas fa-link"></i></a>写出下列三个循环的输出值，并解释原因</h2>      <figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="回答"   >          <a href="#回答" class="heading-link"><i class="fas fa-link"></i></a>回答</h2>              <h3 id="在浏览器环境中"   >          <a href="#在浏览器环境中" class="heading-link"><i class="fas fa-link"></i></a>在浏览器环境中</h3>      <ol><li>输出 39 和十个 10</li><li>输出<code>undefined</code>和 0 到 9</li><li>输出 13 和 0 到 9</li></ol>        <h3 id="在node环境中"   >          <a href="#在node环境中" class="heading-link"><i class="fas fa-link"></i></a>在node环境中:</h3>      <ol><li>输出十个 10</li><li>输出 0 到 9</li><li>输出 0 到 9</li></ol>        <h2 id="解释"   >          <a href="#解释" class="heading-link"><i class="fas fa-link"></i></a>解释</h2>              <h3 id="在-node-下的解释"   >          <a href="#在-node-下的解释" class="heading-link"><i class="fas fa-link"></i></a>在 node 下的解释</h3>      <ol><li>多次执行<code>setTimeout()</code>，会把传入的回调函数依次派发到<code>setTimeout</code>所属的宏任务队列中，等到队列任务派发结束（也就是最后一次<code>setTimeout</code>结束）后，开始依次执行队列的任务，因为 i 在循环结束后已经累加为 10，故结果就是输出十个 10。</li><li>第二个循环使用了<code>IIFE</code>（立即执行函数表达式），因为他将循环 1 的内容包装在了一个函数中，并且将该函数用<code>IIFE</code>再次封装，把每次<code>setTimeou</code>t 创建的队列独立出来，这样使得每个队列依次执行完才进行下一个的执行，所以依次输出 0 到 9。这也是解决循环 1 达不到预期目的的一种解决方案。</li><li>for 循环头部的 let 声明有一个特殊的行为，即变量在循环过程中不止被声明一次。所以随后的每次循环都会使用上一个循环结束时的值来初始化这个变量，使得<code>setTimeout</code>达到预期目的，输出 0 到 9。</li></ol>        <h3 id="关于浏览器与-node-环境中差异的解释"   >          <a href="#关于浏览器与-node-环境中差异的解释" class="heading-link"><i class="fas fa-link"></i></a>关于浏览器与 node 环境中差异的解释</h3>      <p>因为在浏览器的<code>Console</code>控制台执行代码的效果等同于对代码整体调用了<code>eval()</code>函数，所以会解析并额外输出 js 代码的最终值，即本题中的<code>39</code>, <code>undefined</code>, 和<code>13</code>。</p>        <h2 id="参考文章：-彻底理解-setTimeout-简书"   >          <a href="#参考文章：-彻底理解-setTimeout-简书" class="heading-link"><i class="fas fa-link"></i></a>参考文章： 彻底理解 setTimeout() - 简书</h2>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客跳槽记</title>
      <link href="2020/03/23/blog-to-hexo/"/>
      <url>2020/03/23/blog-to-hexo/</url>
      
        <content type="html"><![CDATA[        <h2 id="Jekyll-gt-Hexo"   >          <a href="#Jekyll-gt-Hexo" class="heading-link"><i class="fas fa-link"></i></a>Jekyll =&gt; Hexo</h2>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://i.loli.net/2020/11/21/QJqGlbrP1RiYhIL.png"  alt="hexo-logo.png">      </p>        <h2 id="好累-o-gt-ω-lt-o"   >          <a href="#好累-o-gt-ω-lt-o" class="heading-link"><i class="fas fa-link"></i></a>好累 o((&gt;ω&lt; ))o</h2>      <p>对，好累，折腾了很久终于把博客转移到<code>Hexo</code>了，中途踩了很多坑。还好，时间没白花，最后还是搞成了自己想要的样子。<br>这次找了个简约的“Geek”主题，然后把自己不喜欢的地方改了下，加了点需要的东西。默认语法高亮主题是<code>sublime</code>的高亮主题，我不是很喜欢，改成了<code>One Dark</code>的高亮主题。（和我<code>vscode</code>的主题类似。）然后加上了博文的发布时间，对一些 CSS 样式进行了更改。</p>        <h2 id="图床"   >          <a href="#图床" class="heading-link"><i class="fas fa-link"></i></a>图床</h2>      <p>写博客难免要插入一些图片，我的解决方案是<span class="exturl"><a class="exturl__link"   href="https://sm.ms/"  target="_blank" rel="noopener">sm.ms</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>,免费的图床网站。最大的优点就是简单，快速，缺点是单张图片大小有限制，总容量也不多，但是对我这种对图片需求量不大的人来说还是绰绰有余的。</p>        <h2 id="评论功能"   >          <a href="#评论功能" class="heading-link"><i class="fas fa-link"></i></a>评论功能</h2>      <p>之前用<code>Jekyll</code>的时候发现实现评论功能有点难，换到<code>Hexo</code>之后，借<code>Geek</code>的主题，已经实现了用<code>Valine</code>纯前端来实现评论的功能，我就去注册了个 id，直接搬过来用了。</p>        <h2 id="体会"   >          <a href="#体会" class="heading-link"><i class="fas fa-link"></i></a>体会</h2>      <p>总体来说还是很满意的，比较简洁，不失美感，想要的功能大都实现了。</p>        <h2 id="2020-9-2"   >          <a href="#2020-9-2" class="heading-link"><i class="fas fa-link"></i></a>2020.9.2</h2>      <p>更换主题为 <span class="exturl"><a class="exturl__link"   href="https://github.com/liuyib/hexo-theme-stun"  target="_blank" rel="noopener">stun</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>评论系统使用基于 Github issues 的 <code>gitalk</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>了解SVG格式</title>
      <link href="2020/02/16/svg-format-intro/"/>
      <url>2020/02/16/svg-format-intro/</url>
      
        <content type="html"><![CDATA[        <h2 id="SVG-介绍"   >          <a href="#SVG-介绍" class="heading-link"><i class="fas fa-link"></i></a>SVG 介绍</h2>              <h3 id="什么是-SVG-？"   >          <a href="#什么是-SVG-？" class="heading-link"><i class="fas fa-link"></i></a>什么是 SVG ？</h3>      <p><strong>一种图像文件格式</strong>，英文全称 Scalable Vector Graphics，意为<strong>可缩放的矢量图形</strong>。</p><p>它是基于 XML（Extensible Markup Language），由 World Wide Web Consortium（W3C）联盟进行开发的。严格来说应该是一种开放标准的矢量图形语言，可让你设计激动人心的、高分辨率的 Web 图形页面。用户可以直接<strong>用代码来描绘图像</strong>，可以用<strong>任何文字处理工具打开 SVG 图像</strong>，通过改变部分代码来使图像具有交互功能，并可以随时插入到 HTML 中通过浏览器来观看。</p><p>主流浏览器均支持 SVG。<strong>加载慢</strong>是 SVG 的一个缺点。但是 SVG 也有自身的优点，比如它<strong>实现了 DOM 接口</strong>（比 Canvas 方便），<strong>不需要安装第三方插件</strong>就可以在浏览器中使用（比 Flash 方便）。</p>        <h3 id="为什么要用-SVG-？"   >          <a href="#为什么要用-SVG-？" class="heading-link"><i class="fas fa-link"></i></a>为什么要用 SVG ？</h3>      <p>相比于其他图像格式，SVG 格式的优势在于：</p><ul><li><p>SVG 可被非常多的工具读取和修改（比如记事本）</p></li><li><p>SVG 与 JPEG 和 GIF 图像比起来，<strong>尺寸更小</strong>，且可压缩性更强。</p></li><li><p>SVG 是可伸缩的</p></li><li><p>SVG 图像可在任何的分辨率下被高质量地打印</p></li><li><p>SVG 可在图像质量不下降的情况下被放大</p></li><li><p>SVG 图像中的<strong>文本</strong>是<strong>可选</strong>的，同时也是<strong>可搜索</strong>的（<strong>很适合制作地图</strong>）</p></li><li><p>SVG 可以<strong>与 JavaScript 技术一起运行</strong></p></li><li><p>SVG 是开放的标准</p></li><li><p>SVG 文件是纯粹的 XML</p></li></ul>        <h4 id="SVG-与-Flash"   >          <a href="#SVG-与-Flash" class="heading-link"><i class="fas fa-link"></i></a>SVG 与 Flash</h4>      <p>与 Flash 相比，SVG 最大的优势是与其他标准（比如 XSL 和 DOM）相兼容。而 Flash 则是未开源的私有技术。</p>        <h3 id="基础"   >          <a href="#基础" class="heading-link"><i class="fas fa-link"></i></a>基础</h3>              <h4 id="一个简单的例子"   >          <a href="#一个简单的例子" class="heading-link"><i class="fas fa-link"></i></a>一个简单的例子</h4>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">"1.1"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">baseProfile</span>=<span class="string">"full"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">"200"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">mlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">fill</span>=<span class="string">"red"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"150"</span> <span class="attr">cy</span>=<span class="string">"100"</span> <span class="attr">r</span>=<span class="string">"80"</span> <span class="attr">fill</span>=<span class="string">"green"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"150"</span> <span class="attr">y</span>=<span class="string">"125"</span> <span class="attr">font-size</span>=<span class="string">"60"</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">fill</span>=<span class="string">"white"</span>&gt;</span></span><br><span class="line">    SVG</span><br><span class="line">  <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>最后样子是这样的 👉 <span class="exturl"><a class="exturl__link"   href="https://media.prod.mdn.mozit.cloud/attachments/2012/07/09/3075/89b1e0a26e8421e19f907e0522b188bd/svgdemo1.xml"  target="_blank" rel="noopener">链接 🔗</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>该图绘制流程包括以下几步：</p><ol><li>从 SVG 根元素开始：<ul><li>应舍弃来自 (X)HTML 的 doctype 声明，因为基于 SVG 的 DTD 验证导致的问题比它能解决的问题更多。</li><li><code>version</code>和<code>baseProfile</code>属性是必不可少的，供其它类型的验证方式确定 SVG 版本。</li><li>作为 XML 的一种方言，SVG 必须正确的绑定命名空间 （在 xmlns 属性中绑定）。</li></ul></li><li>绘制一个完全覆盖图像区域的矩形 ，把背景颜色设为红色。</li><li>一个半径 80px 的绿色圆圈绘制在红色矩形的正中央 （向右偏移 150px，向下偏移 100px）。</li><li>绘制文字“SVG”。文字被填充为白色， 通过设置居中的锚点把文字定位到期望的位置：在这种情况下，中心点应该对应于绿色圆圈的中点。还可以精细调整字体大小和垂直位置，确保最后的样式是美观的。</li></ol><blockquote><p>想了解更多？请参考文末详细教程</p></blockquote>        <h3 id="现实中的使用"   >          <a href="#现实中的使用" class="heading-link"><i class="fas fa-link"></i></a>现实中的使用</h3>      <ul><li>        <h4 id="直接嵌入-SVG-代码在网页中使用："   >          <a href="#直接嵌入-SVG-代码在网页中使用：" class="heading-link"><i class="fas fa-link"></i></a>直接嵌入 SVG 代码在网页中使用：</h4>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">version</span>=<span class="string">"1.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span></span></span><br><span class="line"><span class="tag">    <span class="attr">cx</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">cy</span>=<span class="string">"50"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">r</span>=<span class="string">"40"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke</span>=<span class="string">"black"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-width</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">fill</span>=<span class="string">"red"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>可以像上述这样，直接将 svg 标签嵌入到 html 当中引入 svg 图片</p><blockquote><p>其他用 embed iframe object 标签引的入方法此处不作介绍，有兴趣自行搜索相关用法。</p></blockquote></li><li>        <h4 id="用-a-标签链接到-SVG-文件"   >          <a href="#用-a-标签链接到-SVG-文件" class="heading-link"><i class="fas fa-link"></i></a>用 a 标签链接到 SVG 文件</h4>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"circle1.svg"</span>&gt;</span>Click here to view SVG file<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li><li>        <h4 id="SVG-也可以作为本地的一种图片格式文件"   >          <a href="#SVG-也可以作为本地的一种图片格式文件" class="heading-link"><i class="fas fa-link"></i></a>SVG 也可以作为本地的一种图片格式文件</h4>      <p>如，新建一个 <code>demo.svg</code> 文件，然后写入以下内容</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" standalone="no"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">svg</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD SVG 1.1//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">version</span>=<span class="string">"1.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"100"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"40"</span> <span class="attr">stroke</span>=<span class="string">"black"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">fill</span>=<span class="string">"red"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>他在资源管理器中默认的显示图标像一个链接</p><p>双击这个文件即可调用浏览器来打开并渲染出该图。</p></li><li>        <h4 id="SVG-在网页中还可充当图标来使用"   >          <a href="#SVG-在网页中还可充当图标来使用" class="heading-link"><i class="fas fa-link"></i></a>SVG 在网页中还可充当图标来使用</h4>      <p>SVG 在网页设计中的一种重要的用途就是充当图标</p><p>可以作为图片用 css 直接引入并使用，如下示例</p><figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#email</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(./img/email.svg) <span class="number">12px</span> <span class="number">7px</span> no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">  // 在这设置图标大小，不设置就是svg默认的宽高</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li>        <h4 id="制作高质量的图片"   >          <a href="#制作高质量的图片" class="heading-link"><i class="fas fa-link"></i></a>制作高质量的图片</h4>      <p>另外，由于其可无限缩放而保持原有质量的特点，SVG 图还常常用作网页的图片素材，以确保在网站被异常缩放后图片仍能保持高质量。</p></li></ul>        <h3 id="更多"   >          <a href="#更多" class="heading-link"><i class="fas fa-link"></i></a>更多</h3>      <p>SVG 是一个庞大的规范，想了解更多的绘画方法请访问 👉 <span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial"  target="_blank" rel="noopener">SVG 教程- MDN</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="参考文章"   >          <a href="#参考文章" class="heading-link"><i class="fas fa-link"></i></a>参考文章</h3>      <ul><li><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial"  target="_blank" rel="noopener">SVG 教程- MDN</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><a href="[https://baike.baidu.com/item/SVG%E6%A0%BC%E5%BC%8F/3463453?fr=aladdin](https://baike.baidu.com/item/SVG格式/3463453?fr=aladdin)">svg 格式 - 百度百科</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 快速入门</title>
      <link href="2020/02/14/nginx-basis/"/>
      <url>2020/02/14/nginx-basis/</url>
      
        <content type="html"><![CDATA[        <h2 id="Nginx-简要介绍"   >          <a href="#Nginx-简要介绍" class="heading-link"><i class="fas fa-link"></i></a>Nginx 简要介绍</h2>              <h3 id="Nginx-与-Apache"   >          <a href="#Nginx-与-Apache" class="heading-link"><i class="fas fa-link"></i></a>Nginx 与 Apache</h3>      <p><code>Nginx</code> 同 <code>Apache</code> 一样都是一种 WEB 服务器。通过 HTTP 协议提供各种网络服务。</p><p>但毫无争议的世界第一大服务器 <code>Apache</code> 的发展时期很长，它被设计为一个重量级的服务器。</p><p>它不支持高并发的服务器。在 <code>Apache</code> 上运行数以万计的并发访问，会导致服务器消耗大量内存。</p><p>操作系统对其进行进程或线程间的切换也消耗了大量的 CPU 资源，导致 HTTP 请求的平均响应速度降低。</p><p>这些都决定了 <code>Apache</code> 不可能成为高性能 WEB 服务器，轻量级高并发服务器 <code>Nginx</code> 就应运而生了。</p>        <h3 id="Nginx"   >          <a href="#Nginx" class="heading-link"><i class="fas fa-link"></i></a>Nginx</h3>      <p><code>Nginx</code> 是一款自由的、开源的、高性能的 HTTP 服务器和反向代理服务器；同时也是一个 IMAP、POP3、SMTP 代理服务器；<code>Nginx</code> 可以作为一个 HTTP 服务器进行网站的发布处理；另外 <code>Nginx</code> 可以作为反向代理进行负载均衡的实现。</p>        <h2 id="安装"   >          <a href="#安装" class="heading-link"><i class="fas fa-link"></i></a>安装</h2>      <p>参考 👉<span class="exturl"><a class="exturl__link"   href="http://www.Nginx.cn/install"  target="_blank" rel="noopener">官方网站</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>的安装教程</p><p>本文仅讨论 Nginx 在 Linux 服务器上的基本操作</p><blockquote><p>Windows 系统下使用请参考 👉 <span class="exturl"><a class="exturl__link"   href="https://www.jb51.net/article/86839.htm"  target="_blank" rel="noopener">传送门</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h2 id="关于代理"   >          <a href="#关于代理" class="heading-link"><i class="fas fa-link"></i></a>关于代理</h2>              <h3 id="代理的理解"   >          <a href="#代理的理解" class="heading-link"><i class="fas fa-link"></i></a>代理的理解</h3>      <p>所谓代理就是一个代表、一个渠道；</p><p>此时就涉及到两个角色，一个是被代理角色，一个是目标角色，被代理角色通过这个代理访问目标角色完成一些任务的过程称为代理操作过程；</p><p>如同生活中的专卖店，客人到 Adidas 专卖店买了一双鞋，这个专卖店就是代理，被代理角色就是 Adidas 厂家，目标角色就是用户。</p>        <h3 id="分类"   >          <a href="#分类" class="heading-link"><i class="fas fa-link"></i></a>分类</h3>              <h4 id="正向代理"   >          <a href="#正向代理" class="heading-link"><i class="fas fa-link"></i></a>正向代理</h4>      <p>在如今的网络环境下，我们如果由于技术需要，需要去访问国外的某些网站，此时你会发现位于国外的某网站我们通过浏览器是没有办法访问的</p><p>一般的思路是，找到一个可以访问海外网站的服务器，我们将请求发送给这个服务器，让他去访问国外的网站，然后将访问到的数据传递回来来达到我们的目的。</p><p>上述这样的代理模式称为<strong>正向代理</strong>，正向代理最大的特点是客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；<strong>正向代理模式屏蔽或者隐藏了真实客户端信息。</strong></p><p>（差不多意思就是，当你通过正向代理访问 Google 并进行搜索时， Google 的服务器只清楚这个请求来自哪台代理服务器（或 ip 地址），却不知道是来自哪个客户端。因为<strong>客户端是通过代理服务器这个媒介来访访问网站的</strong>。而不用代理直接打开百度并搜索时，百度是知道这个请求是具体来自哪个客户端（或说 ip 地址）的）</p><p>总结来说：正向代理，”它代理的是客户端，代客户端发出请求”，是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p>        <h5 id="正向代理的用途"   >          <a href="#正向代理的用途" class="heading-link"><i class="fas fa-link"></i></a>正向代理的用途</h5>      <ul><li>访问原来无法访问的资源，如 Google 等国外技术资源</li><li>可以做缓存，加速访问资源</li><li>对客户端访问授权，上网进行认证</li><li>记录用户访问记录（上网行为管理），对外隐藏用户信息</li></ul>        <h4 id="反向代理"   >          <a href="#反向代理" class="heading-link"><i class="fas fa-link"></i></a>反向代理</h4>      <p>先来考察一个事例：</p><p>国内某宝电商平台大家都清楚，每天访问的人数相信在双十一期间大家都有目共睹。那么他们是如何处理这个问题的呢？</p><p><strong>分布式部署</strong></p><p>对 <strong>分布式部署</strong></p><p>直白来说就是通过部署多台服务器来解决访问人数限制的问题；某宝网站中大部分功能也是直接使用 Nginx 进行反向代理实现的，并且通过封装 Nginx 和其他的组件之后起了个高大上的名字：Tengine。</p><p>简单理解 就是 一台 Nginx 服务器主要负责处理大量来自客户端请求，然后将这些请求分发给后台的业务服务器，那么这台负责处理请求服务器的运作方式就是反向代理。</p><p>反向代理，”它<strong>代理的是服务端，代服务端接收请求</strong>“，主要用于服务器集群分布式部署，<strong>反向代理隐藏了服务器的信息</strong>。</p>        <h5 id="反向代理的用途"   >          <a href="#反向代理的用途" class="heading-link"><i class="fas fa-link"></i></a>反向代理的用途</h5>      <ul><li><p>保证内网安全</p><p>通常将反向代理作为公网访问地址，其他业务服务器是内网</p></li><li><p>负载均衡</p><p>通过反向代理服务器来优化网站的负载</p></li></ul>        <h2 id="基本配置方法"   >          <a href="#基本配置方法" class="heading-link"><i class="fas fa-link"></i></a>基本配置方法</h2>      <p>安装完 <code>Nginx</code> 后，执行 <code>Nginx</code> 命令。访问服务器公网 ip 地址即可看到 <code>Nginx</code> 的初始页面</p>        <h3 id="两个位置"   >          <a href="#两个位置" class="heading-link"><i class="fas fa-link"></i></a>两个位置</h3>              <h4 id="etc-Nginx"   >          <a href="#etc-Nginx" class="heading-link"><i class="fas fa-link"></i></a>/etc/Nginx/</h4>      <p>这里存放了 <code>Nginx</code> 的全局配置文件 <code>Nginx.conf</code></p><blockquote><p>或者被放在了 <code>/usr/local/Nginx/Nginx.conf</code> 👈 这里</p></blockquote><p>其实配置文件目录下还有一个 <code>Nginx.conf.default</code> 文件</p><blockquote><p>这个文件的作用是：当配置文件修改出错时，可以回到上一正常状态。</p></blockquote>        <h4 id="usr-share-Nginx"   >          <a href="#usr-share-Nginx" class="heading-link"><i class="fas fa-link"></i></a>/usr/share/Nginx/</h4>      <p>这里是部署项目的默认存放目录（默认的 Nginx 欢迎页就是在这个目录下）</p>        <h3 id="开始配置"   >          <a href="#开始配置" class="heading-link"><i class="fas fa-link"></i></a>开始配置</h3>              <h4 id="首先要将你的项目文件或项目目录上传到服务器上"   >          <a href="#首先要将你的项目文件或项目目录上传到服务器上" class="heading-link"><i class="fas fa-link"></i></a>首先要将你的项目文件或项目目录上传到服务器上</h4>      <p>可以<del>到 Github 建个仓库克隆到服务器</del>使用 <code>scp</code> 命令传输</p><blockquote><p>具体可参考我写的<a href="https://vikiboss.top/2020/02/14/scp/">利用 Linux 的 scp 命令传输文件到服务器</a></p></blockquote>        <h4 id="然后用-vi-、vim-或者-nano-等编辑器配置-Nginx-conf-文件"   >          <a href="#然后用-vi-、vim-或者-nano-等编辑器配置-Nginx-conf-文件" class="heading-link"><i class="fas fa-link"></i></a>然后用 vi 、vim 或者 nano 等编辑器配置 Nginx.conf 文件</h4>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/Nginx/Nginx.conf <span class="comment">#此处是你的 Nginx.conf 文件路径</span></span><br></pre></td></tr></table></div></figure>        <h4 id="找到-http-块，可以看到其中有一个默认的-server-块的配置-👇-解释如下"   >          <a href="#找到-http-块，可以看到其中有一个默认的-server-块的配置-👇-解释如下" class="heading-link"><i class="fas fa-link"></i></a>找到 http{ } 块，可以看到其中有一个默认的 server{ } 块的配置 👇 解释如下</h4>      <figure class="highlight nginx"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设定虚拟主机配置</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="comment">#侦听80端口</span></span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="comment">#定义使之生效的请求来源的域名</span></span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">  <span class="comment">#默认请求</span></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="comment">#定义服务器的默认网站根目录位置</span></span><br><span class="line">    <span class="attribute">root</span> /usr/share/Nginx/html;</span><br><span class="line">    <span class="comment">#定义首页索引文件的名称</span></span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">#定义 404 页面</span></span><br><span class="line">  <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">  <span class="comment">#定义 50x 页面</span></span><br><span class="line">  <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">  <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">    <span class="comment">#定义服务器的默认网站根目录位置</span></span><br><span class="line">    <span class="attribute">root</span> /usr/share/Nginx/html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>启动 Nginx 后，访问服务器公网 ip 时显示的默认页面就是这个配置起了作用</p>        <h4 id="自己来写一个简单的-server-块-👇-（假设你部署的项目在-home-blog-下）"   >          <a href="#自己来写一个简单的-server-块-👇-（假设你部署的项目在-home-blog-下）" class="heading-link"><i class="fas fa-link"></i></a>自己来写一个简单的 server 块 👇 （假设你部署的项目在 /home/blog 下）</h4>      <figure class="highlight nginx"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8000</span>;</span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> /home/blog;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>配置完后运行 <code>Nginx -s -reload</code> 进行配置的重载，此时访问服务器 ip 地址的 8000 端口（如：47.93.187.210:8000）就能看到自己部署的项目了！</p><p>请特别注意，这里的一个 <code>/</code> 或者一个 <code>空格</code> 可能都会影响最后部署的结果，请对照着仔细配置。</p><p>当然，这里只介绍了最基础的配置方法。</p>        <h4 id="跨域问题的简单解决方案"   >          <a href="#跨域问题的简单解决方案" class="heading-link"><i class="fas fa-link"></i></a>跨域问题的简单解决方案</h4>      <p>先看代码 👇</p><figure class="highlight nginx"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8000</span>;</span><br><span class="line">  <span class="attribute">location</span><span class="regexp"> ^~/api/</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> https://api.readhub.cn/;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> /home/news;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>项目背景：</p></blockquote><blockquote><p>在编写项目代码时，由于浏览器存在<strong>同源策略</strong>，直接调用 ReadHub 官方的 api （<span class="exturl"><a class="exturl__link"   href="https://api.readhub.cn/），会被"  target="_blank" rel="noopener">https://api.readhub.cn/），会被</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> block。此时用 ‘api/’ 来请求，并用 Nginx 代理到 <span class="exturl"><a class="exturl__link"   href="https://api.readhub.cn/"  target="_blank" rel="noopener">https://api.readhub.cn/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> ，浏览器便会认为你是在同一域下发起的请求而不会拦截，从而实现跨域。</p></blockquote><p>关键在于这里 👇</p><figure class="highlight nginx"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~/api/</span> &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> https://api.readhub.cn/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>location 后面用正则来匹配了所有以 api 结尾的请求，并将其转发到目的 url</p><blockquote><p>这里要搞清易混淆的地方</p></blockquote><blockquote><p>你的待部署项目主页配置应该是 👇</p></blockquote><figure class="highlight nginx"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="attribute">root</span> /home/news;</span><br><span class="line">  <span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>指定当前服务器 ip 对应监听端口的返回页面（即你的项目主页）</p></blockquote><blockquote><p>而下面这个 👇 是你项目中请求其他页面的资源时为了解决跨域问题而特定配置的一个代理，意义就是将当前包含 <code>/api/</code> 结尾的地址转发到你设置的地址，具体更多的正则匹配参考 👉<span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/IPYQ/p/7889399.html"  target="_blank" rel="noopener">Nginx location 正则写法 - 博客园</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><figure class="highlight nginx"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~/api/</span> &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> https://api.readhub.cn/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>有了这个配置后，你的项目请求 api/topic 时，就被 Nginx 代理转发到了 <span class="exturl"><a class="exturl__link"   href="https://api.readhub.cn/topic"  target="_blank" rel="noopener">https://api.readhub.cn/topic</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 从而实现跨越。</p>        <h4 id="Nginx-location-的正则匹配归纳"   >          <a href="#Nginx-location-的正则匹配归纳" class="heading-link"><i class="fas fa-link"></i></a>Nginx location 的正则匹配归纳</h4>      <figure class="highlight nginx"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> = / &#123;</span><br><span class="line">  <span class="comment"># 精确匹配 / ，主机名后面不能带任何字符串</span></span><br><span class="line">  [ configuration A ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="comment"># 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</span></span><br><span class="line">  <span class="comment"># 但是正则和最长字符串会优先匹配</span></span><br><span class="line">  [ configuration B ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /api/ &#123;</span><br><span class="line">  <span class="comment"># 匹配任何以 /api/ 开头的地址，匹配符合以后，还要继续往下搜索</span></span><br><span class="line">  <span class="comment"># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span></span><br><span class="line">  [ configuration C ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /api/ &#123;</span><br><span class="line">  <span class="comment"># 匹配任何以 /api/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</span></span><br><span class="line">  [ configuration D ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="常用正则"   >          <a href="#常用正则" class="heading-link"><i class="fas fa-link"></i></a>常用正则</h3>      <ul><li><code>.</code> ： 匹配除换行符以外的任意字符</li><li><code>?</code> ： 重复 0 次或 1 次</li><li><code>+</code> ： 重复 1 次或更多次</li><li><code>*</code> ： 重复 0 次或更多次</li><li><code>\d</code> ：匹配数字</li><li><code>^</code> ： 匹配字符串的开始</li><li>： 匹配字符串的介绍</li><li><code>{n}</code> ： 重复 n 次</li><li><code>{n,}</code> ： 重复 n 次或更多次</li><li><code>[c]</code> ： 匹配单个字符 c</li><li><code>[a-z]</code> ： 匹配 a-z 小写字母的任意一个</li></ul><p>小括号 <code>()</code> 之间匹配的内容，可以在后面通过 <code>$1</code> 来引用， <code>$2</code> 表示的是前面第二个 <code>()</code> 里的内容。正则里面容易让人困惑的是 <code>\</code> 转义特殊字符。</p>        <h2 id="Nginx-的详细配置以及配置文件详解参考-👇"   >          <a href="#Nginx-的详细配置以及配置文件详解参考-👇" class="heading-link"><i class="fas fa-link"></i></a>Nginx 的详细配置以及配置文件详解参考 👇</h2>      <ul><li><span class="exturl"><a class="exturl__link"   href="http://www.Nginx.cn/76.html"  target="_blank" rel="noopener">Nginx 基本配置与参数说明 - Nginx 中文网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="http://www.Nginx.cn/927.html"  target="_blank" rel="noopener">Nginx 反向代理配置 - Nginx 中文网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h2 id="参考文章"   >          <a href="#参考文章" class="heading-link"><i class="fas fa-link"></i></a>参考文章</h2>      <ul><li><span class="exturl"><a class="exturl__link"   href="http://www.Nginx.cn/591.html"  target="_blank" rel="noopener">Nginx 配置入门 - Nginx 中文网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/IPYQ/p/7889399.html"  target="_blank" rel="noopener">Nginx location 正则写法 - 博客园</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/wcwnina/p/8728391.html"  target="_blank" rel="noopener">Nginx 相关介绍(Nginx 是什么? 能干嘛?) - 博客园</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul><blockquote><p>（强烈建议阅读参考文章里的前两篇文章 👍）</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>利用scp命令跨linux服务器传输文件</title>
      <link href="2020/02/14/scp-to-transfer-files/"/>
      <url>2020/02/14/scp-to-transfer-files/</url>
      
        <content type="html"><![CDATA[        <h2 id="利用-scp-命令在服务器与本地双向传输文件"   >          <a href="#利用-scp-命令在服务器与本地双向传输文件" class="heading-link"><i class="fas fa-link"></i></a>利用 scp 命令在服务器与本地双向传输文件</h2>              <h3 id="什么是-scp-有什么用"   >          <a href="#什么是-scp-有什么用" class="heading-link"><i class="fas fa-link"></i></a>什么是 scp? 有什么用?</h3>      <p><code>scp</code> 是 <strong>Secure Copy</strong> 的简写，用于在 Linux 下进行远程拷贝文件的命令，和它类似的命令有 <code>cp</code> ，不过 <code>cp</code> 只是在本机进行拷贝不能跨服务器，而且 <code>scp</code> 传输是加密的。可能会稍微影响一下速度。</p><p>我们需要获得远程服务器上的某个文件，远程服务器既没有配置 ftp 服务器，没有开启 web 服务器，也没有做共享，无法通过常规途径获得文件时，只需要通过 <code>scp</code> 命令便可轻松的达到目的。</p><p>我们需要将本机上的文件上传到远程服务器上，远程服务器没有开启 ftp 服务器或共享，无法通过常规途径上传是，只需要通过 <code>scp</code> 命令便可以轻松的达到目的。</p>        <h3 id="前提"   >          <a href="#前提" class="heading-link"><i class="fas fa-link"></i></a>前提</h3>      <p>本机的 <code>ssh</code> 命令能够正确连接到远程服务器</p>        <h3 id="可选的常用参数"   >          <a href="#可选的常用参数" class="heading-link"><i class="fas fa-link"></i></a>可选的常用参数</h3>      <ul><li><p><code>-P</code> P 为大写 指定传输端口(默认不修改为 22 端口, 修改后需用这个参数来指定端口)</p></li><li><p><code>-r</code> 递归式复制(可用于传输整个文件夹的内容, 较常用)</p></li><li><p><code>-v</code> 和大多数 Linux 命令中的 <code>-v</code> 意思一样 , 用来显示进度 . 可以用来查看连接 , 认证 , 或是配置错误</p></li><li><p><code>-C</code> C 为大写 使能压缩选项</p></li><li><p><code>-4</code> 强行使用 IPV4 地址</p></li><li><p><code>-6</code> 强行使用 IPV6 地址</p></li></ul>        <h3 id="将本地文件上传到服务器上"   >          <a href="#将本地文件上传到服务器上" class="heading-link"><i class="fas fa-link"></i></a>将本地文件上传到服务器上</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp D:\Desktop\demo.html root@47.93.187.210:/home</span><br></pre></td></tr></table></div></figure><blockquote><p>他表示用 root 用户将本机 <code>D:\desktop</code> 目录下的 <code>demo.html</code> 文件传输到 ip 地址为 47.93.187.210 的服务器的 <code>/home</code> 目录下</p></blockquote>        <h3 id="将本地文件夹上传到服务器上"   >          <a href="#将本地文件夹上传到服务器上" class="heading-link"><i class="fas fa-link"></i></a>将本地文件夹上传到服务器上</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r D:\Desktop\project root@47.93.187.210:/home</span><br></pre></td></tr></table></div></figure><blockquote><p><code>-r</code> 参数表示将本机 <code>D:\desktop</code> 目录下的 <code>project</code> 文件夹<strong>递归式</strong>的( recursive )传输到相应的服务器 <code>/home</code> 目录下, 与 <code>rm</code> 命令用 <code>-r</code> 参数来递归删除非空目录作用类似</p></blockquote>        <h3 id="获取服务器上的文件-文件夹"   >          <a href="#获取服务器上的文件-文件夹" class="heading-link"><i class="fas fa-link"></i></a>获取服务器上的文件(文件夹)</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp root@47.93.187.210:/home  D:\Desktop\project</span><br></pre></td></tr></table></div></figure><blockquote><p>加上 <code>-r</code> 参数的作用与上同 命令的意义与上述类似 容易明白</p></blockquote>        <h3 id="参考文章"   >          <a href="#参考文章" class="heading-link"><i class="fas fa-link"></i></a>参考文章</h3>      <ul><li><span class="exturl"><a class="exturl__link"   href="https://www.vpser.net/manage/scp.html"  target="_blank" rel="noopener">Linux SSH 远程文件/目录传输命令 scp - VPS 侦探</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux目录结构</title>
      <link href="2020/02/13/linux-dir/"/>
      <url>2020/02/13/linux-dir/</url>
      
        <content type="html"><![CDATA[        <h2 id="前言"   >          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a>前言</h2>      <p>刚上手 Linux 系统，首先感到茫然的，我相信就是那个让初学者摸不着头脑（包括我）的目录结构了，这篇文章主要就是简要介绍各个目录相关的知识。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://i.loli.net/2020/11/21/8XzkbHGYlQg5ZTd.png"  alt="linux-content.jpg">      </p>        <h2 id="目录结构"   >          <a href="#目录结构" class="heading-link"><i class="fas fa-link"></i></a>目录结构</h2>      <p>Linux 系统常见的目录结构如下</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/bin    /sbin   /etc    /dev</span><br><span class="line">/proc   /var    /tmp    /usr</span><br><span class="line">/home   /boot   /lib    /opt</span><br><span class="line">/mnt    /media    /srv</span><br></pre></td></tr></table></div></figure>        <h2 id="目录分析"   >          <a href="#目录分析" class="heading-link"><i class="fas fa-link"></i></a>目录分析</h2>              <h3 id="“-“"   >          <a href="#“-“" class="heading-link"><i class="fas fa-link"></i></a>“/“</h3>      <p>根目录</p><p>每一个文件和目录从根目录开始。<br>只有 root 用户具有该目录下的写权限。<br>包含了几乎所的文件目录。相当于中央系统。<br>进入的最简单方法是： <code>cd /</code></p><blockquote><p>请注意， <code>/root</code> 是 <code>root</code> 用户的主目录，这与 <code>/</code> 不一样</p></blockquote>        <h3 id="bin"   >          <a href="#bin" class="heading-link"><i class="fas fa-link"></i></a>/bin</h3>      <p>用户二进制文件(Binaries)</p><p>包含二进制可执行文件。(一些普通命令，如文件操作。)<br>也可认为是普通用户可以使用的命令的存放目录。<br>在单用户模式下，你需要使用的常见 Linux 命令都位于此目录下。<br>系统的所有用户使用的命令都设在这里。</p>        <h3 id="sbin"   >          <a href="#sbin" class="heading-link"><i class="fas fa-link"></i></a>/sbin</h3>      <p>系统二进制文件(System-only binaries)</p><p>在这个目录下的 Linux 命令通常由系统管理员使用，所以也可认为是超级用户可以使用的命令的存放目录。(包含系统命令，如分区、格式化操作等)</p>        <h3 id="etc"   >          <a href="#etc" class="heading-link"><i class="fas fa-link"></i></a>/etc</h3>      <p>全局配置文件存放目录(Etcetera)</p><p>系统和程序一般都可以通过修改相应的配置文件，来进行配置。<br>包括通过系统自动安装的程序的配置文件，如 Nginx，MySql 等的配置文件。<br>一般来说一个程序启动，如果需要读取一些配置文件的话，它会首先读取当前用户家目录的配置文件，如果存在就使用；如果不存在它就到 /etc 下读取全局的配置文件进而启动程序。</p>        <h3 id="dev"   >          <a href="#dev" class="heading-link"><i class="fas fa-link"></i></a>/dev</h3>      <p>设备文件目录(Devices)</p><p>Linux 中设备都是以文件形式出现，这里的设备可以是硬盘，键盘，鼠标，网卡，终端，等设备，通过访问这些文件可以访问到相应的设备。</p>        <h3 id="lib"   >          <a href="#lib" class="heading-link"><i class="fas fa-link"></i></a>/lib</h3>      <p>程序的共享库目录(Libraries)</p><p>包含系统引导和在根用户执行命令时候所必需用到的共享库。</p>        <h3 id="home"   >          <a href="#home" class="heading-link"><i class="fas fa-link"></i></a>/home</h3>      <p>用户分区目录(Home)</p><p>该目录中保存了绝大多数的用户文件(用户自己的配置文件，定制文件，文档，数据等)，root 用户除外，用户可在此处创建自己的目录结构。</p>        <h3 id="boot"   >          <a href="#boot" class="heading-link"><i class="fas fa-link"></i></a>/boot</h3>      <p>引导程序，内核等存放的目录(Boot)</p><p>包括了在引导过程中所必需的文件，引导程序的相关文件。</p>        <h3 id="usr"   >          <a href="#usr" class="heading-link"><i class="fas fa-link"></i></a>/usr</h3>      <p>Unix 系统资源目录(Unix Software Resource)</p><p>系统核心所在，包含了所有的共享文件。现代的 /usr 只专门存放各种程序和数据。这个目录中包含了命令库文件和在通常操作中不会修改的文件。装程序的时候，默认就是安装在此文件内部某个子文件夹内。</p>        <h3 id="root"   >          <a href="#root" class="heading-link"><i class="fas fa-link"></i></a>/root</h3>      <p>root 用户的目录(root)</p><p>相当于 root 用户(即管理员)的 home 目录。</p>        <h3 id="tmp"   >          <a href="#tmp" class="heading-link"><i class="fas fa-link"></i></a>/tmp</h3>      <p>临时文件目录(Temporary files)</p><p>存放系统中的一些临时文件，文件可能会被系统自动清空。在这个文件系统中的数据，实际上是存放在内存中的，由于内存的数据断电易失，当系统重新启动时这个目录会被清空。</p>        <h3 id="var"   >          <a href="#var" class="heading-link"><i class="fas fa-link"></i></a>/var</h3>      <p>内容经常变化的目录(Variable files)</p><p>此目录下文件的大小可能会改变，如缓冲文件，日志文件，缓存文件，等一般都存放在这里。</p>        <h3 id="proc"   >          <a href="#proc" class="heading-link"><i class="fas fa-link"></i></a>/proc</h3>      <p>特殊文件目录(Processes)</p><p>其中包含了全部虚拟文件。它们并不保存在磁盘中，也不占据磁盘空间。当您查看它们时，您实际上看到的是内存里的信息，这些文件助于我们了解系统内部信息。</p>        <h3 id="opt"   >          <a href="#opt" class="heading-link"><i class="fas fa-link"></i></a>/opt</h3>      <p>可择的文件目录(Optional)</p><p>这个目录表示的是可择的意思，某些自定义软件包或者第方工具，就可以安装在这里。<br>我们自己编译的软件包，就可以安装在这个目录中；通过源码包安装的软件，可以把它们的安装路径设置成 /opt 这样来安装。</p>        <h3 id="mnt"   >          <a href="#mnt" class="heading-link"><i class="fas fa-link"></i></a>/mnt</h3>      <p>临时挂载目录(Mount)</p><p>用于存放挂载储存设备的挂载目录的，比如磁盘，光驱，网络文件系统等，当我们需要挂载某个磁盘设备的时候，可以把磁盘设备挂载到这个目录上去，这样我们可以直接通过访问这个目录来访问那个磁盘了。</p>        <h3 id="media"   >          <a href="#media" class="heading-link"><i class="fas fa-link"></i></a>/media</h3>      <p>挂载的媒体设备目录(Media)</p><p>挂载的媒体设备目录，一般外部设备挂载到这里。<br>比如我们插入一个 U 盘，我们一般会发现，Linux 自动在这个目录下建立一个 disk 目录，然后把 U 盘挂载到这个 disk 目录上，通过访问这个 disk 来访问 U 盘。</p>        <h3 id="srv"   >          <a href="#srv" class="heading-link"><i class="fas fa-link"></i></a>/srv</h3>      <p>服务数据目录(Service)</p><p>存放一些对外的服务数据（不是软件，而是数据），如 web、ftp、流媒体等。</p>        <h3 id="lost-found"   >          <a href="#lost-found" class="heading-link"><i class="fas fa-link"></i></a>/lost+found</h3>      <p>恢复的文件目录(Lost Found)</p><p>大多数情况下都是空的。但如果在工作时突然停电，或没有正常关机，重启时，有些文件找不到应该存放的地方，系统会将它们放在这个目录下。</p>        <h3 id="sys"   >          <a href="#sys" class="heading-link"><i class="fas fa-link"></i></a>/sys</h3>      <p>硬件驱动程序信息目录(System)</p><p>正在运行的硬件设备的驱动程序信息。（虚拟文件系统，不占内存）</p>        <h2 id="关于四者的区别"   >          <a href="#关于四者的区别" class="heading-link"><i class="fas fa-link"></i></a>关于四者的区别</h2>      <p>①/bin ②/sbin ③/usr/bin ④/usr/sbin</p><p><code>/bin</code> 一般存放对于用户和系统来说“必须”的程序（二进制文件）。</p><p><code>/sbin</code> 一般存放用于系统管理的“必需”的程序（二进制文件），根用户使用。</p><p><code>/usr/bin</code> 一般存放的只是对用户和系统来说“不是必需的”程序（二进制文件）。</p><p><code>/usr/sbin</code> 一般存放用于系统管理的系统管理的不是必需的程序（二进制文件）。</p>        <h2 id="关于-lib-和-usr-lib-两者的关系"   >          <a href="#关于-lib-和-usr-lib-两者的关系" class="heading-link"><i class="fas fa-link"></i></a>关于 /lib 和 /usr/lib 两者的关系</h2>      <p><code>/lib</code> 和 <code>/usr/lib</code> 的区别类似 <code>/bin</code> , <code>/sbin</code> 与 <code>/usr/bin</code> , <code>/usr/sbin</code> 。</p><p><code>/lib</code> 一般存放对于用户和系统来说“必须”的库（二进制文件）。</p><p><code>/usr/lib</code> 一般存放的只是对用户和系统来说“不是必需的”库（二进制文件）。</p><blockquote><p>详情请参考文章 =&gt; <span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/sweetfather/article/details/79625482"  target="_blank" rel="noopener">详解 Linux 目录</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h2 id="参考文章"   >          <a href="#参考文章" class="heading-link"><i class="fas fa-link"></i></a>参考文章</h2>      <ul><li><p><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/JCSU/articles/2770249.html"  target="_blank" rel="noopener">Linux 目录结构 - 博客园</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li><li><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/sweetfather/article/details/79625482"  target="_blank" rel="noopener">Linux 里有/lib 和/usr/lib 各个目录含义 - CSDN</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于CentOS7中yum失效问题的解决方案</title>
      <link href="2020/01/12/centos7-yum-invalid/"/>
      <url>2020/01/12/centos7-yum-invalid/</url>
      
        <content type="html"><![CDATA[<p>刚在虚拟机中安装完的 CentOS7 的系统，可能出现<strong>无法使用 yum 命令</strong>的问题。可以使用下列方式进行尝试。</p>        <h2 id="可能的原因"   >          <a href="#可能的原因" class="heading-link"><i class="fas fa-link"></i></a>可能的原因</h2>      <p>网卡未启动</p>        <h2 id="解决方案"   >          <a href="#解决方案" class="heading-link"><i class="fas fa-link"></i></a>解决方案</h2>      <p>将网卡设置自启动，并重启网络服务或者系统</p>        <h2 id="具体操作"   >          <a href="#具体操作" class="heading-link"><i class="fas fa-link"></i></a>具体操作</h2>      <ol><li>进入/etc/sysconfig/network-scripts 目录</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> / etc / sysconfig / network - scripts</span><br></pre></td></tr></table></div></figure><ol start="2"><li>修改名为 ifcfg-ens33 的网卡配置文件</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ifcfg - ens33 <span class="comment">#用vi打开文件并进行编辑</span></span><br></pre></td></tr></table></div></figure><blockquote><p>此时涉及到 vi 的操作。输入完上述命令后，按 i 进入编辑式，<br>并将 “ONBOOT” 项的值修改为 “yes” ，然后按 <code>Esc</code> 输入 <code>:wq</code> 保存退出即可</p></blockquote><ol start="3"><li>重启服务</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reboot <span class="comment">#重启系统</span></span><br><span class="line">service network restart <span class="comment">#或者重启网络服务</span></span><br></pre></td></tr></table></div></figure>        <h2 id="其他情况"   >          <a href="#其他情况" class="heading-link"><i class="fas fa-link"></i></a>其他情况</h2>      <p>若上述方法还是无效可以尝试修改 CentOS-Base.repo 中的地址，具体方法与上类似</p><ol><li><p>进入目录 “/etc/yum.repos.d” 。</p></li><li><p>编辑文件 “vi CentOS-Base.repo” 。</p></li><li><p>将所有的 “mirrorlist” 注释掉，将所有的 “baseurl” 取消注释。</p></li><li><p>保存后输入”reboot”重启系统</p></li></ol>        <h2 id="参考文章"   >          <a href="#参考文章" class="heading-link"><i class="fas fa-link"></i></a>参考文章</h2>      <ul><li><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/crowsong/p/9371216.html"  target="_blank" rel="noopener">博客园</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础</title>
      <link href="2020/01/12/linux-basis/"/>
      <url>2020/01/12/linux-basis/</url>
      
        <content type="html"><![CDATA[        <h2 id="前言"   >          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a>前言</h2>      <p>因为家园的 todolist 作业涉及到要自己部署，所以要学会适用于服务端的 <code>Linux</code> 发行版 <code>CentOS</code> 的基本操作，并完成部署作业</p><p>我下载了官网的 CentOS7 版本的镜像, 并安装在 VM 虚拟机中进行学习</p><blockquote><p>安装教程参考了：<a href="https:#www.runoob.com/w3cnote/vmware-install-centos7.html">VM 安装 Centos7-菜鸟教程</a></p></blockquote>        <h2 id="基本操作"   >          <a href="#基本操作" class="heading-link"><i class="fas fa-link"></i></a>基本操作</h2>              <h3 id="基本命令"   >          <a href="#基本命令" class="heading-link"><i class="fas fa-link"></i></a>基本命令</h3>      <ol><li><code>man</code> 命令</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man cp <span class="comment">#查看cp命令的使用文档</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li><code>ls</code> 命令</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls <span class="comment">#列出目录列表</span></span><br><span class="line"></span><br><span class="line">ls - a <span class="comment">#列出全部（包括隐藏的）文件及目录</span></span><br></pre></td></tr></table></div></figure><ol start="3"><li><code>cd</code> 命令</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> / demo / demo <span class="comment">#切换到根目录下的demo下的demo目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> demo <span class="comment">#切换到当前目录下的demo下的demo目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span>~ <span class="comment">#回到到root(~)目录下</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span>.. <span class="comment">#回退到上一目录</span></span><br></pre></td></tr></table></div></figure><ol start="4"><li><code>pwd</code> 、 <code>mkdir</code> 与 <code>rmdir</code> 命令</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span> <span class="comment">#显示目前的目录</span></span><br><span class="line"></span><br><span class="line">mkdir demo <span class="comment">#在当前路径下新建名为demo的文件夹</span></span><br><span class="line"></span><br><span class="line">rmdir demo <span class="comment">#删除名为demo的空目录</span></span><br></pre></td></tr></table></div></figure><ol start="5"><li><code>cp</code> 命令</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp demo demo1 - f - r <span class="comment">#强制复制demo文件或文件夹及其子文件并改名为demo1</span></span><br></pre></td></tr></table></div></figure><ol start="6"><li><code>rm</code> 和 <code>mv</code> 命令</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rm demo - f - r <span class="comment">#强制删除当前目录下的demo文件夹及其子文件夹和文件</span></span><br><span class="line"></span><br><span class="line">mv demo demo1 <span class="comment">#重命名当前目录的demo文件夹或文件为demo1</span></span><br><span class="line"></span><br><span class="line">mv demo demo1 - f <span class="comment">#若目标文件存在则强制覆盖</span></span><br><span class="line"></span><br><span class="line">mv demo demo1 - i <span class="comment">#若目标文件存在，询问是否覆盖</span></span><br></pre></td></tr></table></div></figure>        <h3 id="关于文本文件操作"   >          <a href="#关于文本文件操作" class="heading-link"><i class="fas fa-link"></i></a>关于文本文件操作</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">touch test1 <span class="comment"># 创建 test1 文件</span></span><br><span class="line"></span><br><span class="line">nl demo.txt - n ln <span class="comment">#查看demo.txt文件内容并在行首显示行号</span></span><br><span class="line"></span><br><span class="line">vi demo.txt <span class="comment">#创建demo.txt文件并进行编辑</span></span><br><span class="line"></span><br><span class="line">vim demo.txt <span class="comment">#编辑demo.txt文件</span></span><br></pre></td></tr></table></div></figure><blockquote><p>具体详细权限说明参考：<a href="https:#www.runoob.com/linux/linux-file-attr-permission.html">菜鸟教程</a></p></blockquote><blockquote><p>Linux 内置了 Vim 编辑器，详细用法参考： <a href="https:#www.runoob.com/linux/linux-vim.html">Vi/Vim 操作-菜鸟教程</a></p></blockquote>        <h3 id="终端利用-ssh-登录远程服务器"   >          <a href="#终端利用-ssh-登录远程服务器" class="heading-link"><i class="fas fa-link"></i></a>终端利用 ssh 登录远程服务器</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装ssh:</span></span><br><span class="line">yum install ssh</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动ssh:</span></span><br><span class="line">service sshd start</span><br><span class="line"></span><br><span class="line"><span class="comment">#登录远程服务器:</span></span><br><span class="line">ssh - p 8080 name @127 .0 .0 .1</span><br><span class="line">输入口令：</span><br><span class="line">name @127 .0 .0 .1:</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">-p 后面是端口</span><br><span class="line">name 是服务器用户名</span><br><span class="line">127.0.0.1 是服务器 ip</span><br><span class="line">回车输入口令即可登录</span><br><span class="line">*/</span><br></pre></td></tr></table></div></figure>        <h3 id="Linux-用户管理"   >          <a href="#Linux-用户管理" class="heading-link"><i class="fas fa-link"></i></a>Linux 用户管理</h3>      <ol><li>添加用户</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd– d / home / sam - m sam</span><br></pre></td></tr></table></div></figure><p>此命令创建了一个用户 sam，其中 <code>-d</code> 和 <code>-m</code> 选项用来为登录名 sam 产生一个主目录<code>/home/sam</code> （ <code>/home</code> 为默认的用户主目录所在的父目录，所有用户的目录都应该在此目录下）。<code>-m</code> 命令保证了在目录不存在时自动创建目录</p><ol start="2"><li>删除用户</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel - r sam</span><br></pre></td></tr></table></div></figure><p>此命令删除用户 sam 在系统文件中（主要是 <code>/etc/passwd</code> , <code>/etc/shadow</code> , <code>/etc/group</code> 等）的记录，同时删除用户的主目录。</p><ol start="3"><li>修改用户</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod - s / bin / ksh - d / home / z– g developer sam</span><br></pre></td></tr></table></div></figure><p>此命令将用户 sam 的登录 <code>Shell</code> 修改为 <code>ksh</code> ，主目录改为 <code>/home/z</code> ，用户组改为 <code>developer</code> 。</p><ol start="4"><li>修改口令</li></ol><ul><li>修改当前用户口令</li></ul><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br><span class="line">Old password: ** ** **</span><br><span class="line">New password: ** ** ** *</span><br><span class="line">Re - enter new password: ** ** ** *</span><br></pre></td></tr></table></div></figure><ul><li>超级用户修改任意用户口令</li></ul><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">passwd sam</span><br><span class="line">New password: ** ** ** *</span><br><span class="line">Re - enter new password: ** ** ** *</span><br></pre></td></tr></table></div></figure><ul><li>清除用户口令</li></ul><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd - d sam</span><br></pre></td></tr></table></div></figure>        <h3 id="磁盘管理"   >          <a href="#磁盘管理" class="heading-link"><i class="fas fa-link"></i></a>磁盘管理</h3>              <h4 id="三个常用命令"   >          <a href="#三个常用命令" class="heading-link"><i class="fas fa-link"></i></a>三个常用命令</h4>      <ol><li><code>df</code> 命令</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df - h / etc <span class="comment">#将/etc底下的可用的磁盘容量以易读的容量格式显示</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li><code>du</code> 命令</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du - a - h * <span class="comment">#显示当前目录下所有文件/文件夹的容量大小</span></span><br></pre></td></tr></table></div></figure><ol start="3"><li><code>fdisk</code> 命令</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df - h / etc</span><br></pre></td></tr></table></div></figure>        <h2 id="Vim-的基本操作"   >          <a href="#Vim-的基本操作" class="heading-link"><i class="fas fa-link"></i></a>Vim 的基本操作</h2>      <ul><li><a href="https:#www.runoob.com/linux/linux-vim.html">Vi/Vim - 菜鸟教程</a></li></ul>        <h2 id="注意事项"   >          <a href="#注意事项" class="heading-link"><i class="fas fa-link"></i></a>注意事项</h2>      <ul><li>实际安装时建议选择语言为 English，若选择其他语言很有可能发生意想不到的编码问题</li></ul>        <h2 id="参考文章"   >          <a href="#参考文章" class="heading-link"><i class="fas fa-link"></i></a>参考文章</h2>      <ul><li><a href="https:#www.runoob.com/linux/linux-tutorial.html">Linux 教程 - 菜鸟教程</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础篇（1）</title>
      <link href="2020/01/11/js-basis/"/>
      <url>2020/01/11/js-basis/</url>
      
        <content type="html"><![CDATA[        <h2 id="JavaScript-语法标识符的命名规范"   >          <a href="#JavaScript-语法标识符的命名规范" class="heading-link"><i class="fas fa-link"></i></a>JavaScript 语法标识符的命名规范</h2>      <p><code>JavaScript</code> 中使用变量来作为值的符号名。变量的名字又叫做<strong>标识符</strong>，他的命名需要遵守一定的规则:</p><ol><li><p>必须以字母、下划线 <code>_</code> 或者美元符号开头</p></li><li><p>后续的字符也可以是数字 <code>0-9</code> 或字母(可以是从 <code>A</code> 到 <code>Z</code> 的大写字母和从 <code>a</code> 到 <code>z</code> 的小写字母)</p></li><li><p>可以使用大部分 <code>ISO 8859-1</code> 或 <code>Unicode</code> 编码的字符作标识符，例如 <code>å</code> 和 <code>ü</code></p></li><li><p>也可以使用 <code>Unicode</code> <strong>转义字符</strong>作为标识符</p></li><li><p>不能使用 <code>JavaScript</code> 的保留关键字作为标识符</p></li></ol>        <h3 id="JavaScript-关键字"   >          <a href="#JavaScript-关键字" class="heading-link"><i class="fas fa-link"></i></a>JavaScript 关键字</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://i.loli.net/2020/03/24/KDhPxQfsz8UjLag.png"  alt="关键字.png">      </p>        <h2 id="JavaScript-语法之注释的使用"   >          <a href="#JavaScript-语法之注释的使用" class="heading-link"><i class="fas fa-link"></i></a>JavaScript 语法之注释的使用</h2>      <p>单行注释用 <code>//这里是注释</code> ，多行注释用 <code>/*这里是注释*/</code> ，但是注意注释<strong>不能嵌套使用</strong></p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">6</span>; <span class="comment">//这是单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">可以编写多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></div></figure><blockquote><p>添加注释是为了便于开发者阅读原码和日后的维护。一个好的注释习惯将会带来极大的阅读体验，极大地降低了后续开发者二次开发的难度。</p></blockquote>        <h2 id="JavaScript-语法之分号的使用"   >          <a href="#JavaScript-语法之分号的使用" class="heading-link"><i class="fas fa-link"></i></a>JavaScript 语法之分号的使用</h2>      <p>精炼表述：<strong>行末的分号表示当前语句结束，不过只有在单行内需要分割多条语句时，这个分号才是必须的</strong>。</p><ul><li><code>if else</code> 、 <code>while</code> 、 <code>for</code> 语句的 <code>{ }</code> 之后不需要分号来结束</li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x != <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// ... do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// ... do something</span></span><br><span class="line">&#125; <span class="comment">//此处不加分号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// ... do something</span></span><br><span class="line">&#125; <span class="comment">//此处不加分号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// ... do something</span></span><br><span class="line">&#125; <span class="comment">//此处不加分号</span></span><br></pre></td></tr></table></div></figure><ul><li><p><code>for</code> 语句的 <code>( )</code> 里面的语句分割需要用分号，但最后一条语句结尾不需要分号（如上所示）</p></li><li><p>用 <code>function</code> 关键字声明的语句的 <code>{ }</code> 之后不需要分号</p></li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... do something</span></span><br><span class="line">&#125; <span class="comment">//此处不需要分号</span></span><br></pre></td></tr></table></div></figure><ul><li><p><strong>单行语句可以省略末尾的分号，但是一般并不建议这么做。</strong></p></li><li><p>在一条语句的末尾加上分号虽然不是必需的，但却是是一个很好的习惯，可以大大减少代码中产生 bug 的可能性。</p></li></ul>        <h2 id="JavaScript-语法之声明"   >          <a href="#JavaScript-语法之声明" class="heading-link"><i class="fas fa-link"></i></a>JavaScript 语法之声明</h2>              <h3 id="在-JavaScript-中，有三种声明方式"   >          <a href="#在-JavaScript-中，有三种声明方式" class="heading-link"><i class="fas fa-link"></i></a>在 JavaScript 中，有三种声明方式</h3>      <ol><li><p><code>var</code> 可选初始化一个值</p></li><li><p><code>let</code> 声明一个<strong>块作用域</strong>的<strong>局部变量</strong>，可选初始化一个值</p></li><li><p><code>const</code> 声明一个<strong>块作用域</strong>的<strong>只读常量</strong></p></li></ol><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">const</span> c = <span class="number">520</span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="在-JavaScript，变量的声明也有三种方式"   >          <a href="#在-JavaScript，变量的声明也有三种方式" class="heading-link"><i class="fas fa-link"></i></a>在 JavaScript，变量的声明也有三种方式</h3>      <p>1.<strong>使用关键词</strong> <code>var</code> 。例如 <code>var x = 42</code> 。这个语法可以用来声明<strong>局部变量</strong>和<strong>全局变量</strong>，是比较规范的声明方式</p><p>2.<strong>直接赋值</strong>。例如 <code>a = 6</code> 。在函数外使用这种形式赋值，会产生一个全局变量。在严格模式下会产生错误。所以要<strong>尽可能避免使用这种方式来声明变量</strong></p><p>3.<strong>使用关键词</strong> <code>let</code> 。例如 <code>let y = 13</code> 。这个语法可以用来声明<strong>块作用域</strong>的<strong>局部变量</strong></p>        <h3 id="关于-JavaScript-的变量提升"   >          <a href="#关于-JavaScript-的变量提升" class="heading-link"><i class="fas fa-link"></i></a>关于 JavaScript 的变量提升</h3>      <ul><li>在 <code>JavaScript</code> 中，你可以先使用变量然后再声明变量而不会引发异常。这个概念被叫做<strong>变量提升</strong>。</li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</span><br></pre></td></tr></table></div></figure><ul><li>然而变量提升并不是什么好事，提升后的变量将返回 <code>undefined</code> 值。<strong>当使用或引用某个变量之后，再在后面的语句中进行声明和初始化操作，这个被提升的变量仍将返回</strong> <code>undefined</code></li></ul>        <h3 id="关于-JavaScript-中函数的提升"   >          <a href="#关于-JavaScript-中函数的提升" class="heading-link"><i class="fas fa-link"></i></a>关于 JavaScript 中函数的提升</h3>      <ul><li>函数声明会被提升到顶部，而函数表达式不会被提升</li></ul><blockquote><p>即用 <code>function</code> 关键字直接定义的函数，可以直接通过数名 <code>( )</code> 的形式被引用，而通过变量定义的函数在引用时会被提升。</p></blockquote><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">//520</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">520</span>;</span><br><span class="line">&#125;</span><br><span class="line">bar(); <span class="comment">//Uncaught TypeError: bar is not a function</span></span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h3 id="关于-var-和-let-在声明变量时的区别"   >          <a href="#关于-var-和-let-在声明变量时的区别" class="heading-link"><i class="fas fa-link"></i></a>关于 var 和 let 在声明变量时的区别</h3>      <ul><li><p><code>let</code> 和 <code>var</code> 的区别体现在作用域上。</p></li><li><p><code>var</code> 的作用域被规定为一个函数作用域，而 <code>let</code> 则被规定为块作用域，块作用域要比函数作用域小一些。</p></li><li><p>但是如果两者既没在函数中，也没在块作用域中定义，那么两者都属于全局作用域。</p></li><li><p>在 ES6 标准中， <code>let</code> （ <code>const</code> ）<strong>将不会提升变量到代码块的顶部。</strong>因此，在变量声明之前引用这个变量，将抛出引用错误。</p></li><li><p>为了减少不必要的麻烦，<strong>一般建议声明变量使用</strong><code>let</code><strong>关键字来声明变量</strong></p></li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------全局定义，两者相同------</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------let定义的全局对象不作为全局对象window的属------</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------函数中定义变量，两者相同------</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> bar = <span class="string">"hehe"</span>; <span class="comment">// 函数作用域中的变量</span></span><br><span class="line">  <span class="keyword">var</span> foo = <span class="string">"lala"</span>; <span class="comment">// 函数作用域中的变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------块作用域------</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">//1,2,3,4,5</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">//ReferenceError: i is not defined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">//1,2,3,4,5</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">//1,2,3,4,5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------重新声明------</span></span><br><span class="line"><span class="keyword">let</span> me = <span class="string">"foo"</span>;</span><br><span class="line"><span class="keyword">let</span> me = <span class="string">"bar"</span>; <span class="comment">//SyntaxError: Identifier 'me' hasalready been declared</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me = <span class="string">"foo"</span>;</span><br><span class="line"><span class="keyword">var</span> me = <span class="string">"bar"</span>; <span class="comment">//me被重新替代，var可以进行重复声明作，不报错</span></span><br></pre></td></tr></table></div></figure>        <h3 id="JavaScript-的变量声明和引用问题"   >          <a href="#JavaScript-的变量声明和引用问题" class="heading-link"><i class="fas fa-link"></i></a>JavaScript 的变量声明和引用问题</h3>      <ul><li><p>变量被声明但未赋值时，可以被引用，其初始值为 <code>undefined</code></p></li><li><p>访问未声明的变量会抛出引用错误</p></li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//b is not defined</span></span><br></pre></td></tr></table></div></figure>        <h3 id="关于-JavaScript-中的全局变量声明"   >          <a href="#关于-JavaScript-中的全局变量声明" class="heading-link"><i class="fas fa-link"></i></a>关于 JavaScript 中的全局变量声明</h3>      <ul><li><p>在函数之外声明的变量，叫做全局变量，因为它可被当前文档中的任何其他代码所访问。</p></li><li><p>在函数内部声明的变量，叫做局部变量，因为它只能在当前函数的内部访问。</p></li><li><p>全局变量是全局对象的属性。<strong>在网页中，全局对象是</strong> <code>window</code> ，<strong>可以用形如</strong><code>window.variable</code><strong>的语法来设置和访问全局变量。</strong></p></li></ul>        <h3 id="关于-JavaScript-中常量的声明"   >          <a href="#关于-JavaScript-中常量的声明" class="heading-link"><i class="fas fa-link"></i></a>关于 JavaScript 中常量的声明</h3>      <ul><li><p>可以用 <code>ES6</code> 的关键字 <code>const</code> 创建一个只读的常量。常量标识符的命名规则和变量相同：必须以字母、下划线 <code>_</code> 或美元符号<code>$</code>开头并可以包含有字母、数字或下划线</p></li><li><p><code>const</code> 声明一个只读的常量。一旦声明，常量的值就不能改变。且 const 一旦声明变量，就必须立即初始化，不能留到以后赋值。</p></li><li><p><code>const</code> 的作用域与 <code>let</code> 命令相同：只在声明所在的块级作用域内有效。</p></li><li><p><code>const</code> 命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。也与 <code>let</code> 一样不可重复声明。</p></li><li><p><code>const</code> 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。</p></li><li><p><code>const</code> 如果引用的是一个对象，只能保证引用对象的这个指针不变，但对象本身的数据结构是可以改变的。</p></li><li><p>若省略 <code>const</code> 关键字，则该标识符将被视为变量</p></li><li><p>在同一作用域中，不能使用与变量名或函数名相同的名字来命名常量。</p></li></ul>        <h2 id="关于-JavaScript-中的数据结构和类型"   >          <a href="#关于-JavaScript-中的数据结构和类型" class="heading-link"><i class="fas fa-link"></i></a>关于 JavaScript 中的数据结构和类型</h2>      <ul><li><p>最新的 ECMAScript 标准定义了 8 种数据类型：</p></li><li><p>七种基本数据类型:</p><ol><li><p><code>布尔值（Boolean）</code> ，有 2 个值分别是：true 和 false.</p></li><li><p><code>null</code> ， 一个表明 null 值的特殊关键字。</p><blockquote><p>JavaScript 是大小写敏感的，因此 null 与 Null、NULL 或变体完全不同。</p></blockquote></li><li><p><code>undefined</code> ，和 null 一样是一个特殊的关键字，undefined 表示变量未定义时的属性。</p></li><li><p><code>数字（Number）</code> ，整数或浮点数.</p><blockquote><p>例如： 42 或者 3.14159。</p></blockquote></li><li><p><code>整数 (BigInt)</code> ，任意精度。</p><blockquote><p>可以安全地存储和操作大整数，甚至可以超过数字的安全整数限制。</p></blockquote></li><li><p><code>字符串（String）</code> ，字符串是一串表示文本值的字符序列，例如：”Howdy” 。</p></li><li><p><code>代表（Symbol）</code> ，一种实例是唯一且不可改变的数据类型（在 ECMAScript 6 中新添加的类型）。</p></li></ol></li><li><p>以及 <code>对象（Object）</code> 。</p></li></ul>        <h2 id="关于-JavaScript-中数据类型的转换"   >          <a href="#关于-JavaScript-中数据类型的转换" class="heading-link"><i class="fas fa-link"></i></a>关于 JavaScript 中数据类型的转换</h2>      <ul><li>JavaScript 是一种动态类型语言(dynamically typed language)。也就是说在声明变量时可以不必指定数据类型，而数据类型会在代码执行时会根据需要自动转换。下面的代码是合法且有效的。</li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="string">"Hello World!"</span>;</span><br><span class="line"></span><br><span class="line">x = <span class="string">"The answer is "</span> + <span class="number">42</span>; <span class="comment">// "The answer is 42"</span></span><br><span class="line">y = <span class="number">42</span> + <span class="string">" is the answer"</span>; <span class="comment">// "42 is the answer"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*涉及其它运算符（如下面的减号'-'）时，</span></span><br><span class="line"><span class="comment">JavaScript语言不会把数字变为字符串。*/</span></span><br><span class="line"></span><br><span class="line"><span class="string">"37"</span> - <span class="number">7</span>; <span class="comment">// 30</span></span><br><span class="line"><span class="string">"37"</span> + <span class="number">7</span>; <span class="comment">// "377"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"1.1"</span> + <span class="string">"1.1"</span> = <span class="string">"1.11.1"</span>(+<span class="string">"1.1"</span>) + +<span class="string">"1.1"</span>; <span class="comment">//2.2</span></span><br><span class="line"><span class="comment">// 注意：加入括号为清楚起见，不是必需的。</span></span><br></pre></td></tr></table></div></figure>        <h2 id="关于-JavaScript-中的字面量-Literals"   >          <a href="#关于-JavaScript-中的字面量-Literals" class="heading-link"><i class="fas fa-link"></i></a>关于 JavaScript 中的字面量 (Literals)</h2>      <ul><li><p>字面量是由语法表达式定义的常量</p></li><li><p>其值是固定的，而且在程序脚本运行中不可更改</p></li></ul><blockquote><p>比如 false，3.1415，thisIsStringOfHelloworld invokedFunction: myFunction(“myArgument”)，</p></blockquote><ul><li>ECMAScript 2015 增加了一种新的字面量，叫做模板字面量 template literals。它包含一些新特征，包括了多行字符串！</li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> poem = <span class="string">`Roses are red,</span></span><br><span class="line"><span class="string">Violets are blue.</span></span><br><span class="line"><span class="string">Sugar is sweet,</span></span><br><span class="line"><span class="string">and so is foo.`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(poem);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Roses are red,</span></span><br><span class="line"><span class="comment">Violets are blue.</span></span><br><span class="line"><span class="comment">Sugar is sweet,</span></span><br><span class="line"><span class="comment">and so is foo.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></div></figure>        <h2 id="关于-JavaScript-转义字符"   >          <a href="#关于-JavaScript-转义字符" class="heading-link"><i class="fas fa-link"></i></a>关于 JavaScript 转义字符</h2>      <ul><li>在给字符串赋多行的值时，可以用 <code>\</code> 来表示</li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a =</span><br><span class="line">  <span class="string">"Hello \</span></span><br><span class="line"><span class="string">world \</span></span><br><span class="line"><span class="string">!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//Hello world !</span></span><br></pre></td></tr></table></div></figure>        <h2 id="JavaScript-标准"   >          <a href="#JavaScript-标准" class="heading-link"><i class="fas fa-link"></i></a>JavaScript 标准</h2>      <ul><li><p><code>ECMAScript</code> ：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于<strong>指代标准本身</strong>。</p></li><li><p><code>JavaScript</code> ：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。</p></li><li><p><code>ECMAScript 5 (ES5)</code> ：ECMAScript 的第五版修订（<strong>ES5</strong>），于 <strong>2009</strong> 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。</p></li><li><p><code>ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)</code> ：ECMAScript 的第六版修订（<strong>ES6</strong>），于 <strong>2015</strong> 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅这张兼容性表来查看不同浏览器和工具的实现情况。</p></li><li><p>最新的 ES7, ES8, ES9, ES10 参考链接:</p></li></ul><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://juejin.im/post/5ca2e1935188254416288eb2#heading-25"  target="_blank" rel="noopener">ES6,ES7,ES8,ES9,ES10 新特性-简书</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><ul><li><code>ECMAScript Proposals</code> ：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）</li></ul>        <h2 id="参考文章"   >          <a href="#参考文章" class="heading-link"><i class="fas fa-link"></i></a>参考文章</h2>      <ul><li><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript"  target="_blank" rel="noopener">JavaScript-MDN</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，<span class="exturl"><a class="exturl__link"   href="ttps://www.jianshu.com/p/9f7f053f7204" >javascript 中 let 和 var 的区别-简书</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript错误处理</title>
      <link href="2020/01/11/js-error/"/>
      <url>2020/01/11/js-error/</url>
      
        <content type="html"><![CDATA[        <h2 id="JavaScript-原生错误类型"   >          <a href="#JavaScript-原生错误类型" class="heading-link"><i class="fas fa-link"></i></a>JavaScript 原生错误类型</h2>              <h3 id="（1）SyntaxError"   >          <a href="#（1）SyntaxError" class="heading-link"><i class="fas fa-link"></i></a>（1）SyntaxError</h3>      <ul><li>SyntaxError 是解析代码时发生的语法错误。</li></ul>        <h3 id="（2）ReferenceError"   >          <a href="#（2）ReferenceError" class="heading-link"><i class="fas fa-link"></i></a>（2）ReferenceError</h3>      <ul><li>ReferenceError 是引用一个不存在的变量时发生的错误。</li></ul>        <h3 id="（3）RangeError"   >          <a href="#（3）RangeError" class="heading-link"><i class="fas fa-link"></i></a>（3）RangeError</h3>      <ul><li>RangeError 是当一个值超出有效范围时发生的错误。主要有几种情况，一是数组长度为负数，二是 Number 对象的方法参数超出范围，以及函数堆栈超过最大值。</li></ul>        <h3 id="（4）TypeError"   >          <a href="#（4）TypeError" class="heading-link"><i class="fas fa-link"></i></a>（4）TypeError</h3>      <ul><li>TypeError 是变量或参数不是预期类型时发生的错误。比如，对字符串、布尔值、数值等原始类型的值使用 new 命令，就会抛出这种错误，因为 new 命令的参数应该是一个构造函数。</li></ul>        <h3 id="（5）URIError"   >          <a href="#（5）URIError" class="heading-link"><i class="fas fa-link"></i></a>（5）URIError</h3>      <ul><li>URIError 是 URI 相关函数的参数不正确时抛出的错误，主要涉及 encodeURI()、decodeURI()、encodeURIComponent()、decodeURIComponent()、escape()和 unescape()这六个函数。</li></ul>        <h3 id="（6）EvalError"   >          <a href="#（6）EvalError" class="heading-link"><i class="fas fa-link"></i></a>（6）EvalError</h3>      <ul><li>eval 函数没有被正确执行时，会抛出 EvalError 错误。该错误类型已经不再在 ES5 中出现了，只是为了保证与以前代码兼容，才继续保留。</li></ul><blockquote><p>以上这 6 种派生错误，连同原始的 Error 对象，都是构造函数。开发者可以使用它们，人为生成错误对象的实例。</p></blockquote>        <h2 id="异常处理语句"   >          <a href="#异常处理语句" class="heading-link"><i class="fas fa-link"></i></a>异常处理语句</h2>      <ul><li><p><code>try</code> 语句测试代码块的错误。</p></li><li><p><code>catch</code> 语句处理错误。</p></li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="comment">//catch参数可以接受从try传来的错误信息</span></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li><p><code>throw</code> 语句创建自定义错误。</p></li><li><p>下面是示例</p></li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">message</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    allert(<span class="string">"Welcome guest!"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    txt = <span class="string">"本页有一个错误。\n\n"</span>;</span><br><span class="line">    txt += <span class="string">"错误描述："</span> + err.message + <span class="string">"\n\n"</span>;</span><br><span class="line">    txt += <span class="string">"点击确定继续。\n\n"</span>;</span><br><span class="line">    alert(txt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li><p>上述例子的 message()函数中，故意将 alert 错写成 allert，此时发生了错误，allert()函数未定义。JavaScript 引擎本该终止并抛出错误，但是由于 <code>try...catch...</code> 语句的存在， <code>catch</code> 块会捕捉到 <code>try</code> 块中的错误，并执行代码来处理它。</p></li><li><p>搭配 <code>throw</code> 可以自定义生成错误信息</p></li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).value;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="string">""</span>) <span class="keyword">throw</span> <span class="string">"empty"</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(x)) <span class="keyword">throw</span> <span class="string">"not a number"</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">10</span>) <span class="keyword">throw</span> <span class="string">"too high"</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">5</span>) <span class="keyword">throw</span> <span class="string">"too low"</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"error:"</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>为了捕捉不同类型的错误，catch 代码块之中可以加入判断语句。</li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  foo.bar();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e <span class="keyword">instanceof</span> <span class="built_in">EvalError</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.name + <span class="string">": "</span> + e.message);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> <span class="built_in">RangeError</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.name + <span class="string">": "</span> + e.message);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>即使有 return 语句在前，finally 代码块依然会得到执行，且在其执行完毕后，才会显示 return 语句的值。</li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">countUp();</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line">count;</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></div></figure>        <h2 id="finally-代码块"   >          <a href="#finally-代码块" class="heading-link"><i class="fas fa-link"></i></a>finally 代码块</h2>      <ul><li><code>try...catch</code> 结构允许在最后添加一个 finally 代码块，表示不管是否出现错误，都必需在最后运行的语句。</li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cleansUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"出错了……"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"此行不会执行"</span>);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"完成清理工作"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cleansUp();</span><br><span class="line"><span class="comment">// 完成清理工作</span></span><br><span class="line"><span class="comment">// Uncaught Error: 出错了……</span></span><br></pre></td></tr></table></div></figure><p>上面代码中，由于没有 <code>catch</code> 语句块，所以错误没有捕获执行 <code>finally</code> 代码块以后，程序就中断在错误抛出的方。</p>        <h2 id="finally-代码块用法的典型场景"   >          <a href="#finally-代码块用法的典型场景" class="heading-link"><i class="fas fa-link"></i></a>finally 代码块用法的典型场景</h2>      <figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"bug"</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 这句原本会延迟到finally代码块结束再执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>); <span class="comment">// 不会运行</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 这句会覆盖掉前面那句return</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>); <span class="comment">// 不会运行</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>); <span class="comment">// 不会运行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = f();</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">result;</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></div></figure><p>上面代码中， <code>catch</code> 代码块结束执行之前，会先执行 <code>finally</code> 代码块。从 <code>catch</code> 转入 <code>finally</code> 的标志，不仅有 <code>return</code> 语句，还有 <code>throw</code> 语句。</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"出错了！"</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"捕捉到内部错误"</span>);</span><br><span class="line">    <span class="keyword">throw</span> e; <span class="comment">// 这句原本会等到finally结束再执行</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 直接返回</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  f();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// 此处不会执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'caught outer "bogus"'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>上面代码中，进入 <code>catch</code> 代码块之后，一遇到 <code>throw</code> 语句，就会去执行 <code>finally</code> 代码块，其中有 <code>return false</code> 语句，因此就直接返回了，不再会回去执行 <code>catch</code> 代码块剩下的部分了。</p>        <h2 id="参考文章"   >          <a href="#参考文章" class="heading-link"><i class="fas fa-link"></i></a>参考文章</h2>      <ul><li><span class="exturl"><a class="exturl__link"   href="https://www.w3cschool.cn/javascript_guide/javascript_guide-xb63268n.html"  target="_blank" rel="noopener">JavaScript 错误处理机制-W3Cschool</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>寒假学习计划和进度记录</title>
      <link href="2020/01/10/2020-winter-learning/"/>
      <url>2020/01/10/2020-winter-learning/</url>
      
        <content type="html"><![CDATA[<p>在 2020 年寒假开始的这天写下我的 2020 年寒假计划，希望自己能通过这个寒假的学习有所收获</p>        <h2 id="前言"   >          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a>前言</h2>      <p>去年暑假，在南昌大学信工的群里，我认识了家园的学长，通过他们，了解了很多有关工作室的基本情况，萌发了要加入这个社团的想法。</p><p>开学后，经过笔试、一面、二面、最终考核以及试用期考核的重重筛选之下，我最终留在家园工作室。大一上这一个学期以来，除了临近期末的那两个礼拜，每周五都会有培训，刚开始的内容都是基础的知识，还没有分前后端。到后来经过了难忘的 <code>Hackweek</code> 之后，大家对前后端都有了基本的认识，后面的培训也就是前后端分开，可能是在个人爱好和前端狂热心理的驱动下，我选择了前端。</p><p>这一个学期下来，感觉自己学的东西很杂，了解了很多，但都没有去深入地学习。后来，偶然间在研发的群里看到了学长分享前几年的一个很厉害的学长(子健学长，<span class="exturl"><a class="exturl__link"   href="https://blog.lxxyx.cn/"  target="_blank" rel="noopener">繁易の前端乐园</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>）的寒假学习文章之后，心理上也想在寒假逼自己一把，于是，我也在寒假之初写下了这篇寒假计划，希望寒假结束后，自己能有很大成长。</p><blockquote><p>文章会及时记录学习的过程、总结，并在标题后注明时间</p></blockquote>        <h2 id="寒假学习计划-2020-1-10-更新"   >          <a href="#寒假学习计划-2020-1-10-更新" class="heading-link"><i class="fas fa-link"></i></a>寒假学习计划 2020.1.10 更新</h2>      <ol><li>        <h4 id="完成家园前端-2020-年-1-月-13-日截至的-ToDoList-的作业"   >          <a href="#完成家园前端-2020-年-1-月-13-日截至的-ToDoList-的作业" class="heading-link"><i class="fas fa-link"></i></a>完成家园前端 2020 年 1 月 13 日截至的 ToDoList 的作业</h4>      <blockquote><p>完成静态页面的基本布局 2020.1.10</p></blockquote><blockquote><p>完成基本页面布局的确定 2020.1.11</p></blockquote><blockquote><p>完成基本功能的实现:添加事项 事项分类 列表渲染 2020.1.11</p></blockquote><blockquote><p>完成: 事项标记 事项重置 和 及时更新 2020.1.12</p></blockquote><blockquote><p>提交作业 2020.1.13</p></blockquote></li><li>        <h4 id="系统地学习并熟悉-HTML-、-CSS-及-HTML5-、-CSS5-的新特征和用法"   >          <a href="#系统地学习并熟悉-HTML-、-CSS-及-HTML5-、-CSS5-的新特征和用法" class="heading-link"><i class="fas fa-link"></i></a>系统地学习并熟悉 HTML 、 CSS 及 HTML5 、 CSS5 的新特征和用法</h4>      <blockquote><p>看完尚硅谷的前端 HTML 与 CSS 基础视频 2020.1.20-2020.1.24</p></blockquote><blockquote><p>了解了一些 HTML5 的新标签，新用法（如：canvas 标签等）</p></blockquote></li><li>        <h4 id="阅读红宝书——-《JavaScript高级程序设计》"   >          <a href="#阅读红宝书——-《JavaScript高级程序设计》" class="heading-link"><i class="fas fa-link"></i></a>阅读红宝书—— 《JavaScript高级程序设计》</h4>      <blockquote><p>阅读到**页 2020.1.10</p></blockquote></li><li>        <h4 id="学习-Linux-服务器端的常用命令和基本操作"   >          <a href="#学习-Linux-服务器端的常用命令和基本操作" class="heading-link"><i class="fas fa-link"></i></a>学习 Linux 服务器端的常用命令和基本操作</h4>      </li><li>        <h4 id="学习-MySql"   >          <a href="#学习-MySql" class="heading-link"><i class="fas fa-link"></i></a>学习 MySql</h4>      </li><li>        <h4 id="学习-Python-的后端基础（爬虫，后端支持等）"   >          <a href="#学习-Python-的后端基础（爬虫，后端支持等）" class="heading-link"><i class="fas fa-link"></i></a>学习 Python 的后端基础（爬虫，后端支持等）</h4>      </li><li>        <h4 id="学习用-Nginx-部署网页"   >          <a href="#学习用-Nginx-部署网页" class="heading-link"><i class="fas fa-link"></i></a>学习用 Nginx 部署网页</h4>      <blockquote><p>学习 Nginx 部署 2020.1.12</p></blockquote></li><li>        <h4 id="学习实践-JavaScript-的基本语法与高级特性"   >          <a href="#学习实践-JavaScript-的基本语法与高级特性" class="heading-link"><i class="fas fa-link"></i></a>学习实践 JavaScript 的基本语法与高级特性</h4>      </li><li>        <h4 id="Vue-の再深入"   >          <a href="#Vue-の再深入" class="heading-link"><i class="fas fa-link"></i></a>Vue の再深入</h4>      <blockquote><p>用 Vue 写家园 ToDoList 的作业 2020.1.10</p></blockquote><blockquote><p>了解 Vuex 2020.1.10</p></blockquote><blockquote><p>重新系统学习 Vue，主要参考官方文档 2020.1.20~2020.122</p></blockquote></li><li>        <h4 id="学习-Excel"   >          <a href="#学习-Excel" class="heading-link"><i class="fas fa-link"></i></a>学习 Excel</h4>      <p>学习链接 =&gt; <span class="exturl"><a class="exturl__link"   href="https://pan.baidu.com/mall/product/detail/album?pid=2305861249939800889"  target="_blank" rel="noopener">8 小时趣学 Excel</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><ul><li><p>八小时速成 Excel 完成一半 2020.1.15</p></li><li><p>数据透视表 分列 规范录入数据 快捷键 函数</p></li><li><p>八小时速成 Excel 完成后半 2020.1.16</p></li><li><p>函数 图表 图表美化 打印 文档保护</p></li></ul></li><li>        <h4 id="学习-PPT"   >          <a href="#学习-PPT" class="heading-link"><i class="fas fa-link"></i></a>学习 PPT</h4>      </li></ol>        <h2 id="2020-1-10"   >          <a href="#2020-1-10" class="heading-link"><i class="fas fa-link"></i></a>2020/1/10</h2>      <ul><li><p>今天起的比较晚。</p></li><li><p>上午主要是完善了 todolist 任务的页面，静态元素，基本的排版等。</p></li><li><p>下午修改了页面 ui，选定为 <code>ElemrntUI</code> + <code>MDUI</code> 的前端 ui，同时完善了页面的布局。</p></li><li><p>用了 <code>localstorage</code> 的本地储存功能，实现了列表的本地保存与读取列表的功能，还没添加修改状态，删除和修改内容的基本功功能</p></li><li><p>还在哔哩哔哩看了 <code>Vuex</code> 的状态管理，虽然貌似没怎么看懂。</p></li></ul>        <h2 id="2020-1-11"   >          <a href="#2020-1-11" class="heading-link"><i class="fas fa-link"></i></a>2020/1/11</h2>      <ul><li><p>今天起的很早</p></li><li><p>早上起来看了很久的 <code>JavaScript</code> 基础，包括：分号的使用，命名规则，错误处理，注释，声明，变量提升等</p></li><li><p>下午也在学习 <code>JavaScript</code> 的基础语法，把基础打好</p></li><li><p>后面在继续完善寒假 <code>todolist</code> 作业，把冗杂的结构简化了，只保留了 <code>app.vue</code> 文件，考虑到任务比较简单，就没有写入过多的模板，组件等</p></li><li><p>到了半夜十二点，超不多</p></li></ul>        <h2 id="2020-1-12"   >          <a href="#2020-1-12" class="heading-link"><i class="fas fa-link"></i></a>2020/1/12</h2>      <ol><li><p>学习了 <code>Nginx</code> 部署网页</p><blockquote><p>虽然好像学的很迷茫，但好在最后还是部署上去了。</p></blockquote></li><li><p>学习了很多 <code>Linux</code> 的命令，做了总结</p></li></ol>        <h2 id="2020-1-26"   >          <a href="#2020-1-26" class="heading-link"><i class="fas fa-link"></i></a>2020/1/26</h2>              <h3 id="害！"   >          <a href="#害！" class="heading-link"><i class="fas fa-link"></i></a>害！</h3>      <p>这一段时间，事情太多，又要到处走亲戚啥的，没有及时更新，简单总结一下这段期间的学习</p><ul><li>Excel</li></ul><p>花了两天看了 Excel 的进阶视频，学习了布局，基本操作，函数，透视表等。</p><ul><li>HTML 和 CSS</li></ul><p>花了四五天看完了一百多集的尚硅谷前端 HTML 和 CSS 教程</p><ul><li>Vue</li></ul><p>参照了 Vue 的官方文档重学了一部分 Vue 的基础知识</p><ul><li>React</li></ul><p>这几天看了一点点 React 的教程视频，帮着邬振彬学长写家园主站的样式</p><ul><li>总结</li></ul><p>这一个多星期比较颓废，没有很认真的在学习，尤其是自己还沉迷游戏几天，该打！</p>        <h2 id="2020-2-11"   >          <a href="#2020-2-11" class="heading-link"><i class="fas fa-link"></i></a>2020/2/11</h2>              <h3 id="好久没更新了"   >          <a href="#好久没更新了" class="heading-link"><i class="fas fa-link"></i></a>好久没更新了</h3>      <p>简单总计一下这半个月来的学习情况</p><ul><li><p>看 <code>JavaScript</code> 有关的基础视频</p></li><li><p>本想跟着教程用<strong>面向对象</strong>的思想写一个简单的 <code>网页贪吃蛇</code> 项目，一开始像按照自己的思路写，发现后面思路不同，自己没头绪也写不下去了。</p></li><li><p>学习与<strong>服务器</strong>有关的一些概念、常规的操作，对服务器建立<strong>基本的认知</strong></p></li><li><p>通过安卓 <code>Termux</code> 终端软件学习、熟悉 <code>Linux</code> 的基本操作，包括但不限于：</p><ul><li><p>目录相关的操作（ <code>cd</code> <code>pwd</code> <code>ls</code> <code>~</code> <code>/</code> <code>whereis</code> <code>which</code> ）</p></li><li><p>文件的<strong>增</strong>、<strong>删</strong>、<strong>改</strong>（常用<strong>编辑器</strong>的简单使用）</p></li><li><p>常用的一些<strong>包管理工具</strong>的使用（<strong>安装</strong>、<strong>卸载</strong>）</p></li><li><p><strong>镜像源</strong>的修改</p></li><li><p>常见工具的使用（ <code>ping</code> <code>dig</code> <code>nano</code> <code>vi</code> <code>vim</code> <code>ssh</code> <code>neofetch</code> <code>cal</code> <code>curl</code> <code>tar</code> <code>zip</code> <code>upzip</code> <code>wget</code> …）</p></li></ul></li><li><p>相对深入的学习了 <code>ssh</code> 的用法，<strong>私匙</strong>、<strong>公匙</strong>的用途，在服务器上使用以达到<strong>免密登录</strong>等</p></li><li><p>跟着<strong>视频</strong>以及<strong>官方文档</strong>学习了 <code>React</code> ，算入了门</p></li><li><p>做家园寒假前端的 <code>ReadHub</code> 的作业，尽可能实现自己想要达到的效果，目前仅达到自己预期功能的<strong>一半</strong></p></li><li><p>学习了 <code>Nginx</code> 的<strong>基本部署</strong>。通过不断摸索，摸爬滚打地找到了 <code>Nginx</code> <strong>反向代理</strong>的简单操作</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows命令行基础知识</title>
      <link href="2019/12/18/windows-common-cmd/"/>
      <url>2019/12/18/windows-common-cmd/</url>
      
        <content type="html"><![CDATA[<p>使用 <code>help</code> + <code>命令名</code> 命令可以查看对应命令的详细用法</p><blockquote><p>如: <code>help dir</code> 可以查看 dir 命令的详细用法</p></blockquote>        <h2 id="1-切换路径"   >          <a href="#1-切换路径" class="heading-link"><i class="fas fa-link"></i></a>1. 切换路径:</h2>      <ol><li><code>d:</code> 或 <code>c:</code> 切换到到对应盘的根目录</li><li><code>cd D:\downloads</code> 切换到 D 盘下的 downloads 目录</li><li><code>cd demo</code> 切换到当前路径下的 demo 文件夹</li><li><code>cd ..</code> 回退到上一目录</li><li><code>cd ..\demo</code> 切换到上一目录的 demo 文件夹</li><li><code>cd \</code> 或 <code>cd /</code> 回退到当前所在盘的根目录</li></ol>        <h2 id="2-文件-文件夹操作"   >          <a href="#2-文件-文件夹操作" class="heading-link"><i class="fas fa-link"></i></a>2. 文件/文件夹操作:</h2>      <ol><li><code>dir</code> 列出当前路径下的文件和文件夹</li><li><code>mkdir demo</code> 在当前路径下新建名为 demo 的文件夹</li><li><code>copy demo1.md demo2.md</code> 将当前路径下 demo1.md 拷贝并命名为 demo2.md</li><li><code>copy demo1.md demo</code> 将当前路径下 demo1.md 拷贝到当前路径下的 demo 文件夹中</li><li><code>del demo.md</code> 删除当前路径下名为 demo.md 的文件且不能在回收站恢复</li><li><code>del demo</code> 删除当前路径下名为 demo 的文件夹下的所有文件（不会删除 demo 文件夹下的文件夹）</li><li><code>rd demo</code> 删除当前路径下名为 demo 的空文件夹</li><li><code>move demo.md demo</code> 将当前路径下的 demo.md 文件移动到当前路径下的 demo 文件夹 (同时也可用来改文件名)</li><li><code>del *.* /s /q /f</code> 静默删除当前路径下的所有文件及文件夹且无法恢复（慎用，我在尝试的时候就错把桌面文件全删没了 QAQ）</li></ol>        <h2 id="3-有趣的命令"   >          <a href="#3-有趣的命令" class="heading-link"><i class="fas fa-link"></i></a>3. 有趣的命令</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成指定大小的空文件</span></span><br><span class="line">fsutil file createnew demo.txt 524288000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成空文件</span></span><br><span class="line">"" &gt; README.md</span><br><span class="line">copy nul &gt; file.txt</span><br></pre></td></tr></table></div></figure>        <h2 id="PS"   >          <a href="#PS" class="heading-link"><i class="fas fa-link"></i></a>PS:</h2>      <ol><li>Win10 可以在文件夹空白处按住 <code>shift</code> ，再单击鼠标右键选择在此目录打开 powershell 的选项来快速打开当前路径的 powershell</li></ol><blockquote><p>如：在桌面空白处按住 shift，再单击鼠标右键可以看到”在此处打开 powershell 窗口”的选项</p></blockquote><ol start="2"><li><p>在文件夹窗口按 <code>Alt</code> + <code>d</code> 快捷键可快速定位到地址栏，再输入 <code>cmd</code> 或者 <code>powershell</code> 即可以快速打开当前路径下的命令行窗口</p></li><li><p>将文件夹拖入 <code>powershell</code> 的界面可以快速键入该目录的绝对路径</p></li><li><p>如果已经安装了 <code>vscode</code> ，可以输入 <code>code .</code> 命令用 <code>vscode</code> 打开当前目录</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Githug小白指南</title>
      <link href="2019/12/14/git-githug/"/>
      <url>2019/12/14/git-githug/</url>
      
        <content type="html"><![CDATA[        <h2 id="前言"   >          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a>前言</h2>              <h3 id="Githug-简介"   >          <a href="#Githug-简介" class="heading-link"><i class="fas fa-link"></i></a>Githug 简介</h3>      <p><code>Githug</code> （不是 <code>Github</code> ）是一个用 <code>Ruby</code> 编写的、用来练习 <code>Git</code> 的闯关小游戏。在闯关过程中，我们可以掌握 <code>Git</code> 的基本用法、加深理解，同时提高熟练度。</p><blockquote><ul><li>不了解 <code>Git</code> ?👉<span class="exturl"><a class="exturl__link"   href="https://zhidao.baidu.com/question/1994271798219235947.html?qbl=relate_question_0&word=git%BF%C9%D2%D4%B8%C9%C2%EF"  target="_blank" rel="noopener">浅谈 Git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><code>Git</code> 、 <code>Githug</code> 和 <code>Github</code> 概念混淆?👉<span class="exturl"><a class="exturl__link"   href="https://zhidao.baidu.com/question/1963914368577710820.html?fr=iks&word=git+github+githug%B9%D8%CF%B5&ie=gbk"  target="_blank" rel="noopener">Git、Githug 和 Github 的关系</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul></blockquote>        <h3 id="闯关原则"   >          <a href="#闯关原则" class="heading-link"><i class="fas fa-link"></i></a>闯关原则</h3>      <p>在闯关过程中，要时刻明白，我们闯关的目的是学习 <code>git</code> ，所以请不要为了闯关而闯关，而忽略了闯关过程中的收获。我们的重点在于学习 <code>Git</code> 。</p>        <h3 id="进行-Githug-前的准备"   >          <a href="#进行-Githug-前的准备" class="heading-link"><i class="fas fa-link"></i></a>进行 Githug 前的准备</h3>              <h4 id="安装-Ruby"   >          <a href="#安装-Ruby" class="heading-link"><i class="fas fa-link"></i></a>安装 Ruby</h4>      <p><code>Ruby</code> 是一种开源的动态编程语言。因为 <code>Githug</code> 是用 <code>Ruby</code> 写的，所以我们得先安装 <code>Ruby</code> （已安装则跳过此步）。<span class="exturl"><a class="exturl__link"   href="https://www.ruby-lang.org/zh_cn/downloads/"  target="_blank" rel="noopener">Ruby 官网安装指引</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>Windows 用户可直接下载安装程序进行安装 :<span class="exturl"><a class="exturl__link"   href="https://rubyinstaller.org/downloads/"  target="_blank" rel="noopener">下载 Ruby 安装程序</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>安装完后，打开命令行界面执行下列命令：</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby --version</span><br></pre></td></tr></table></div></figure><blockquote><p>不了解命令行?👉<span class="exturl"><a class="exturl__link"   href="https://zhidao.baidu.com/question/1387050620456949460.html"  target="_blank" rel="noopener">命令行</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>若输出有关 <code>Ruby</code> 的版本号，则代表安装成功。</p>        <h4 id="安装-Githug"   >          <a href="#安装-Githug" class="heading-link"><i class="fas fa-link"></i></a>安装 Githug</h4>      <p>执行下列三行命令修改默认下载源:</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//删除默认需要翻墙才能用的国外下载源 gem sources --remove https://rubygems.org/</span><br><span class="line">//设置下载源为国内可以访问的下载源 gem sources --a https://gems.ruby-china.org/</span><br><span class="line">//查看是否安装成功 gem sources -l</span><br></pre></td></tr></table></div></figure><p>换源成功后执行下列命令安装 <code>Githug</code></p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install githug</span><br></pre></td></tr></table></div></figure>        <h2 id="初始化-Githug"   >          <a href="#初始化-Githug" class="heading-link"><i class="fas fa-link"></i></a>初始化 Githug</h2>      <p>首先打开一个你想要建立 githug 游戏目录的文件夹，然后在资源管理器（暂时简单理解为文件夹的页面）的地址栏(有 <code>&quot;C:\windows\&quot;</code> 这样类似文字的编辑框)输入 <code>cmd</code> 回车。系统会自动打开位于当前路径下的 <code>cmd</code> 控制台，在这个命令行界面输入 <code>githug</code> ，返回的预期结果如下：</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*********************************************************** * Githug *</span><br><span class="line">*********************************************************** No githug directory</span><br><span class="line">found， do you wish to create one? [yn]</span><br></pre></td></tr></table></div></figure><p>这个提示的意思是你已经进入到 <code>Githug</code> 的游戏界面了，但是它未检索到游戏目录，提示你是否要建立目录。此时，输入字母 <code>y</code> 并按回车确认，它会在该文件夹下创建名为 <code>git_hug</code> 的游戏文件夹，然后用如下命令行进入到 <code>git_hug</code> 路径下就可以进行闯关了。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd git_hug</span><br></pre></td></tr></table></div></figure><blockquote><p>不会命令行的基本操作?👉<span class="exturl"><a class="exturl__link"   href="https://jingyan.baidu.com/article/ceb9fb1074947b8cad2ba0f9.html"  target="_blank" rel="noopener">命令行基本操作</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h3 id="常用的命令"   >          <a href="#常用的命令" class="heading-link"><i class="fas fa-link"></i></a>常用的命令:</h3>      <blockquote><ul><li><code>githug</code> 或 <code>githug play</code> 检测当前关卡是否通过</li><li><code>githug hint</code> 显示当前关卡的提示</li><li><code>githug reset</code> 重置当前关卡</li><li><code>githug levels</code> 列出所有关卡</li></ul></blockquote><p>注 · 在任意关卡退出后，再次进入 <code>Githug</code> ，闯关进度会保存</p>        <h2 id="闯关指引"   >          <a href="#闯关指引" class="heading-link"><i class="fas fa-link"></i></a>闯关指引</h2>              <h3 id="Level-1-init"   >          <a href="#Level-1-init" class="heading-link"><i class="fas fa-link"></i></a>Level 1 init</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Name: init Level: 1 Difficulty: * A new directory， `git_hug` ， has been</span><br><span class="line">created; initialize an empty repository in it.</span><br></pre></td></tr></table></div></figure>        <h3 id="Level-2"   >          <a href="#Level-2" class="heading-link"><i class="fas fa-link"></i></a>Level 2</h3>              <h3 id="Level-3"   >          <a href="#Level-3" class="heading-link"><i class="fas fa-link"></i></a>Level 3</h3>              <h3 id="Level-4"   >          <a href="#Level-4" class="heading-link"><i class="fas fa-link"></i></a>Level 4</h3>              <h3 id="Level-5"   >          <a href="#Level-5" class="heading-link"><i class="fas fa-link"></i></a>Level 5</h3>              <h3 id="Level-6"   >          <a href="#Level-6" class="heading-link"><i class="fas fa-link"></i></a>Level 6</h3>              <h3 id="Level-7"   >          <a href="#Level-7" class="heading-link"><i class="fas fa-link"></i></a>Level 7</h3>              <h3 id="Level-8"   >          <a href="#Level-8" class="heading-link"><i class="fas fa-link"></i></a>Level 8</h3>              <h3 id="Level-9"   >          <a href="#Level-9" class="heading-link"><i class="fas fa-link"></i></a>Level 9</h3>              <h3 id="Level-10"   >          <a href="#Level-10" class="heading-link"><i class="fas fa-link"></i></a>Level 10</h3>              <h3 id="Level-11"   >          <a href="#Level-11" class="heading-link"><i class="fas fa-link"></i></a>Level 11</h3>              <h3 id="Level-12"   >          <a href="#Level-12" class="heading-link"><i class="fas fa-link"></i></a>Level 12</h3>              <h3 id="Level-13"   >          <a href="#Level-13" class="heading-link"><i class="fas fa-link"></i></a>Level 13</h3>              <h3 id="Level-14"   >          <a href="#Level-14" class="heading-link"><i class="fas fa-link"></i></a>Level 14</h3>              <h3 id="Level-15"   >          <a href="#Level-15" class="heading-link"><i class="fas fa-link"></i></a>Level 15</h3>              <h3 id="Level-16"   >          <a href="#Level-16" class="heading-link"><i class="fas fa-link"></i></a>Level 16</h3>              <h3 id="Level-17"   >          <a href="#Level-17" class="heading-link"><i class="fas fa-link"></i></a>Level 17</h3>              <h3 id="Level-18"   >          <a href="#Level-18" class="heading-link"><i class="fas fa-link"></i></a>Level 18</h3>              <h3 id="Level-19"   >          <a href="#Level-19" class="heading-link"><i class="fas fa-link"></i></a>Level 19</h3>              <h3 id="Level-20"   >          <a href="#Level-20" class="heading-link"><i class="fas fa-link"></i></a>Level 20</h3>              <h3 id="Level-21"   >          <a href="#Level-21" class="heading-link"><i class="fas fa-link"></i></a>Level 21</h3>              <h3 id="Level-22"   >          <a href="#Level-22" class="heading-link"><i class="fas fa-link"></i></a>Level 22</h3>              <h3 id="Level-23"   >          <a href="#Level-23" class="heading-link"><i class="fas fa-link"></i></a>Level 23</h3>              <h3 id="Level-24"   >          <a href="#Level-24" class="heading-link"><i class="fas fa-link"></i></a>Level 24</h3>              <h3 id="Level-25"   >          <a href="#Level-25" class="heading-link"><i class="fas fa-link"></i></a>Level 25</h3>              <h3 id="Level-26"   >          <a href="#Level-26" class="heading-link"><i class="fas fa-link"></i></a>Level 26</h3>              <h3 id="Level-27"   >          <a href="#Level-27" class="heading-link"><i class="fas fa-link"></i></a>Level 27</h3>              <h3 id="Level-28"   >          <a href="#Level-28" class="heading-link"><i class="fas fa-link"></i></a>Level 28</h3>              <h3 id="Level-29"   >          <a href="#Level-29" class="heading-link"><i class="fas fa-link"></i></a>Level 29</h3>              <h3 id="Level-30"   >          <a href="#Level-30" class="heading-link"><i class="fas fa-link"></i></a>Level 30</h3>              <h2 id="需要注意的问题"   >          <a href="#需要注意的问题" class="heading-link"><i class="fas fa-link"></i></a>需要注意的问题</h2>              <h2 id="Git-学习资料"   >          <a href="#Git-学习资料" class="heading-link"><i class="fas fa-link"></i></a>Git 学习资料</h2>      <ul><li><p><span class="exturl"><a class="exturl__link"   href="https://www.liaoxuefeng.com/wiki/896043488029600"  target="_blank" rel="noopener">Git 教程 - 慕雪峰</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li><li><p><span class="exturl"><a class="exturl__link"   href="https://www.w3cschool.cn/git/"  target="_blank" rel="noopener">Git 教程 - W3School</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li><li><p><span class="exturl"><a class="exturl__link"   href="https://www.runoob.com/git/git-tutorial.html"  target="_blank" rel="noopener">Git 教程 - 菜鸟教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li></ul>        <h2 id="参考文章"   >          <a href="#参考文章" class="heading-link"><i class="fas fa-link"></i></a>参考文章</h2>      <ul><li><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/huitailang1991/article/details/54288618"  target="_blank" rel="noopener">利用 githug 来练习 git - 灰太狼</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li><li><p><span class="exturl"><a class="exturl__link"   href="https://wzb.me/posts/2019/09/06/githug-guideline.html"  target="_blank" rel="noopener">Github 通关指南 - Wzb 博客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li><li><p><span class="exturl"><a class="exturl__link"   href="http://lunarnai.cn/2016/03/30/githug%20%E4%B8%8D%E5%AE%8C%E5%85%A8%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/"  target="_blank" rel="noopener">GitHug 不完全通关攻略 - lunar</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li><li><p><span class="exturl"><a class="exturl__link"   href="https://jingyan.baidu.com/article/ceb9fb1074947b8cad2ba0f9.html"  target="_blank" rel="noopener">命令行</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言常见算法</title>
      <link href="2019/11/13/common-c-algorithm/"/>
      <url>2019/11/13/common-c-algorithm/</url>
      
        <content type="html"><![CDATA[        <h1 id="整理-C-语言常见算法"   >          <a href="#整理-C-语言常见算法" class="heading-link"><i class="fas fa-link"></i></a>整理 C 语言常见算法</h1>              <h2 id="循环实现-不定数组的排序"   >          <a href="#循环实现-不定数组的排序" class="heading-link"><i class="fas fa-link"></i></a>循环实现: 不定数组的排序</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, i, j, t, l[<span class="number">100</span>];</span><br><span class="line"><span class="comment">//输入小于100的任意个数的数字,回车为终止符</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;l[n++]);</span><br><span class="line">&#125; <span class="keyword">while</span> (getchar() != <span class="string">'\n'</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line"><span class="keyword">if</span> (l[j] &gt;= l[i]) &#123;</span><br><span class="line">t = l[i];</span><br><span class="line">l[i] = l[j];</span><br><span class="line">l[j] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, l[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="递归实现-倒序输出字符串"   >          <a href="#递归实现-倒序输出字符串" class="heading-link"><i class="fas fa-link"></i></a>递归实现:倒序输出字符串</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rev</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rev();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rev</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);</span><br><span class="line">    <span class="keyword">if</span> (c != <span class="string">'\n'</span>)&#123;</span><br><span class="line">        rev();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="递归实现-输出斐波那契数列前-20-项"   >          <a href="#递归实现-输出斐波那契数列前-20-项" class="heading-link"><i class="fas fa-link"></i></a>递归实现: 输出斐波那契数列前 20 项</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//循环输出第i项</span></span><br><span class="line"><span class="keyword">for</span>(; i&lt;=<span class="number">20</span>; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d位: %d\n"</span>,i,f(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个函数, 输出斐波那契数列第n项</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用三元运算符判断并递归调用f()函数</span></span><br><span class="line"><span class="keyword">return</span> (n==<span class="number">1</span>|n==<span class="number">2</span>)?<span class="number">1</span>:(f(n<span class="number">-1</span>)+f(n<span class="number">-2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="for-循环-打印三角形"   >          <a href="#for-循环-打印三角形" class="heading-link"><i class="fas fa-link"></i></a>for 循环:打印三角形</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;    <span class="comment">//定义图形高度n</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n; <span class="comment">//输入n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="comment">//外层循环控制高度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; n; k++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//内层第一个循环打印空格，至于循环起始值和边界值仔细看应该不难明白</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"*"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//内层第二个循环打印图形组成字符"*"，这个j的边界之根据字符个数和行号的关系找得规律</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//打完一行时输出换行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="递归实现-阶乘、组合数"   >          <a href="#递归实现-阶乘、组合数" class="heading-link"><i class="fas fa-link"></i></a>递归实现: 阶乘、组合数</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//封装一个递归调用函数fac↓</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n==<span class="number">0</span>||n==<span class="number">1</span>)?<span class="number">1</span>:n*fac(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装一个求组合数的函数yoo↓</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">yoo</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fac(n) / fac(m) * fac(n - m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数开始↓</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z, answer;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;z);</span><br><span class="line">    answer = fac(z);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"answer = %lld"</span>, answer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="指针实现-倒序输出字符串-原创"   >          <a href="#指针实现-倒序输出字符串-原创" class="heading-link"><i class="fas fa-link"></i></a>指针实现:倒序输出字符串(原创)</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rev</span><span class="params">(<span class="keyword">char</span> *p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> x[<span class="number">30</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,x);</span><br><span class="line">    <span class="comment">//x传递的是x字符串的首地址↓</span></span><br><span class="line">rev(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rev</span><span class="params">(<span class="keyword">char</span> *p)</span> </span>&#123;</span><br><span class="line"><span class="comment">//找到字符串的'\0'结束标志的位置↓</span></span><br><span class="line"><span class="keyword">while</span>(*p!=<span class="string">'\0'</span>) p++;;</span><br><span class="line"><span class="comment">//从最后位置(--p)开始往前输出 ↓</span></span><br><span class="line"><span class="function"><span class="keyword">do</span> <span class="title">printf</span><span class="params">(<span class="string">"%c"</span>,*(--p))</span></span>;</span><br><span class="line"><span class="keyword">while</span>(*p!=<span class="string">'\0'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="已知三边长求三角形的面积"   >          <a href="#已知三边长求三角形的面积" class="heading-link"><i class="fas fa-link"></i></a>已知三边长求三角形的面积</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> a, b, c, s, s2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please enter the length of the three sides : "</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    s2 = <span class="number">1.0</span> / <span class="number">2</span> * (a + b + c);</span><br><span class="line">    <span class="comment">//sqrt是开方函数,在math库中</span></span><br><span class="line">    s = <span class="built_in">sqrt</span>(s2 * (s2 - a) * (s2 - b) * (s2 - c));</span><br><span class="line">    <span class="comment">//endl(最后为小写字母 l)表示焦点定位到最后一行末尾↓</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Area = "</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="递归实现-倒序输出整数"   >          <a href="#递归实现-倒序输出整数" class="heading-link"><i class="fas fa-link"></i></a>递归实现:倒序输出整数</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">rev</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,rev(x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">rev</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">9</span>) <span class="keyword">return</span> n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,n%<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(n/<span class="number">10</span>!=<span class="number">0</span>) rev(n/<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="指针实现-输出数组中最大数"   >          <a href="#指针实现-输出数组中最大数" class="heading-link"><i class="fas fa-link"></i></a>指针实现: 输出数组中最大数</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">20</span>],y,n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123; <span class="comment">//输入n个数,可负,0结束输入</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(y!=<span class="number">0</span>) x[n++]=y;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">max</span>(x,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个新指针q记录最大值的地址</span></span><br><span class="line"><span class="keyword">int</span> *q=p;</span><br><span class="line"><span class="comment">//n个数需要判断n-1次</span></span><br><span class="line"><span class="keyword">for</span>(; n&gt;<span class="number">1</span>; n--)</span><br><span class="line"><span class="keyword">if</span>(*q&gt;=*p) p++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,*p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="二进制与十进制的转化"   >          <a href="#二进制与十进制的转化" class="heading-link"><i class="fas fa-link"></i></a>二进制与十进制的转化</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_decimal</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decimal_binary</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Instructions:\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1. convert binary to decimal.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"2. convert decimal to binary.\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'1'</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Enter a binary number: "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d in binary = %d in decimal"</span>, n, binary_decimal(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'2'</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Enter a decimal number: "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d in decimal = %d in binary"</span>, n, decimal_binary(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/* Function to convert decimal to binary.*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decimal_binary</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rem, i = <span class="number">1</span>, binary = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>)&#123;</span><br><span class="line">        rem = n % <span class="number">2</span>;</span><br><span class="line">        n /= <span class="number">2</span>;</span><br><span class="line">        binary += rem * i;</span><br><span class="line">        i *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> binary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Function to convert binary to decimal.*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_decimal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> decimal = <span class="number">0</span>, i = <span class="number">0</span>, rem;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>)&#123;</span><br><span class="line">        rem = n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">        decimal += rem * <span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> decimal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VScode新手指南</title>
      <link href="2019/11/11/vscode-get-started/"/>
      <url>2019/11/11/vscode-get-started/</url>
      
        <content type="html"><![CDATA[        <h2 id="介绍"   >          <a href="#介绍" class="heading-link"><i class="fas fa-link"></i></a>介绍</h2>      <p>全称 <code>Visual Studio Code</code></p><p>微软于 2015 年推出的一款免费开源跨平台的现代化轻量级代码编辑器编辑器。它支持几乎所有主流的开发语言的语法高亮、智能代码补全、自定义快捷键、括号匹配和颜色区分、代码片段、代码对比 Diff、GIT 命令 等特性，支持插件扩展，并针对网页开发和云端应用开发做了优化。软件跨平台支持 Win、Mac 以及 Linux，运行流畅，可谓是微软的良心之作。</p>        <h3 id="常用的配置以及使用技巧"   >          <a href="#常用的配置以及使用技巧" class="heading-link"><i class="fas fa-link"></i></a>常用的配置以及使用技巧</h3>      <blockquote><p>待更新 2020-3-24</p></blockquote>        <h3 id="常用快捷键"   >          <a href="#常用快捷键" class="heading-link"><i class="fas fa-link"></i></a>常用快捷键</h3>      <ol><li><p><code>Alt</code> + <code>up/down</code> 向上/下移动当前行</p></li><li><p><code>Alt</code> + <code>Click</code> 多选光标的插入位置(可多行同时编辑)</p></li><li><p><code>Ctrl</code> + <code>X</code> 删除当前行</p></li><li><p><code>Ctrl</code> + <code>Enter</code> 在当前行下插入新的一行</p></li><li><p><code>Ctrl</code> + <code>Shift</code> + <code>Enter</code> 在当前行上插入新的一行</p></li><li><p><code>Ctrl</code> + <code>]/[</code> 行缩进/取消缩进</p></li><li><p><code>Ctrl</code> + <code>/</code> 添加/取消当前行的注释</p></li><li><p><code>Ctrl</code> + <code>L</code> 选中当前行</p></li><li><p><code>Shift</code> + <code>Alt</code> + <code>up/down</code> 把当前行向上/下复制</p></li><li><p><code>Shift</code> + <code>Alt</code> + <code>A</code> 添加/取消区域注释</p></li></ol>        <h3 id="常用插件"   >          <a href="#常用插件" class="heading-link"><i class="fas fa-link"></i></a>常用插件</h3>      <blockquote><p>待更新 2019-12-19</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello Jekyll !</title>
      <link href="2019/11/08/blog-to-Jekyll/"/>
      <url>2019/11/08/blog-to-Jekyll/</url>
      
        <content type="html"><![CDATA[        <h2 id="2019-11-8"   >          <a href="#2019-11-8" class="heading-link"><i class="fas fa-link"></i></a>2019.11.8</h2>      <p>使用 <code>GitHubPages</code> 和 <code>Jekyll</code> 建立个人博客时默认的一篇文章，留个纪念。</p>        <h2 id="2020-3-22"   >          <a href="#2020-3-22" class="heading-link"><i class="fas fa-link"></i></a>2020.3.22</h2>      <p>由于种种原因，我把阵地搬到了 Hexo 上。<br>新站点使用 <code>GitHubPages</code> + <code>Hexo</code>搭建 。</p>        <h2 id="2020-9-2"   >          <a href="#2020-9-2" class="heading-link"><i class="fas fa-link"></i></a>2020.9.2</h2>      <p>更换主题为 <span class="exturl"><a class="exturl__link"   href="https://github.com/liuyib/hexo-theme-stun"  target="_blank" rel="noopener">stun</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>评论系统使用基于 Github issues 的 <code>gitalk</code></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
